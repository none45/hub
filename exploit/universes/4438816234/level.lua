local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local plr = game.Players.LocalPlayer

local Window = Rayfield:CreateWindow({
	Name = "Â®Exploit GUI",
	LoadingTitle = "Exploiting the game..",
	LoadingSubtitle = "by F4F4",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "nones hub", -- Create a custom folder for your hub/game
		FileName = "levels"
	},
	Discord = {
		Enabled = false,
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
		RememberJoins = false -- Set this to false to make them join the discord every time they load it up
	},
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided",
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local MainTab = Window:CreateTab("universal", nil) -- Title, Image
local MainSection = MainTab:CreateSection("main")


Rayfield:Notify({
	Title = "script executed!!!",
	Content = "thanks for using nones hub",
	Duration = 6.5,
	Image = nil,
	Actions = { -- Notification Buttons
		Ignore = {
			Name = "okay!",
			Callback = function()
				--The user tapped Okay!
			end
		},
	},
})

local Dex = MainTab:CreateButton({
	Name = "dex explorer",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/peyton2465/Dex/master/out.lua"))()
	end,
})

local Orca = MainTab:CreateButton({
	Name = "orca hub",
	Callback = function()
		loadstring(
			game:HttpGetAsync("https://raw.githubusercontent.com/richie0866/orca/master/public/latest.lua")
		)()
	end,
})

local saveinstance = MainTab:CreateButton({
	Name = "saveinstance",
	Callback = function()
		local Params = {
    RepoURL = "https://raw.githubusercontent.com/luau/SynSaveInstance/main/",
      SSI = "saveinstance",
    }
    local synsaveinstance = loadstring(game:HttpGet(Params.RepoURL .. Params.SSI .. ".luau", true), Params.SSI)()
    local Options = {} -- Documentation here https://luau.github.io/UniversalSynSaveInstance/api/SynSaveInstance
    synsaveinstance(Options)
	end,
})

--[[local Slider = MainTab:CreateSlider({
	Name = "Walkspeed Slider ðŸŽ¨",
	Range = {0, 400},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 16,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
	end,
})]]

local tpoptions = {}
local exits = {}
local exitcounter = 0

local plrspawn = workspace.Map:FindFirstChild("SpawnLocation")
if plrspawn then
	table.insert(tpoptions, "spawn")
end

local shop = nil
if workspace:FindFirstChild("CurrentRooms") and workspace.CurrentRooms:FindFirstChild("Shop") then
	shop = workspace.CurrentRooms.Shop.Hendron.PrimaryPart
	table.insert(tpoptions, "shop")
elseif workspace:FindFirstChild("SpecialRooms") and workspace.SpecialRooms:FindFirstChild("Shop") then
	shop = workspace.SpecialRooms.Shop.Hendron.PrimaryPart
	table.insert(tpoptions, "shop")
end

for _, descendant in ipairs(workspace:GetDescendants()) do
	if descendant:IsA("BasePart") and descendant.Name == "inside" then
		local parent = descendant.Parent
		if parent and parent:IsA("Folder") and parent.Name == "Elevator" then
			exitcounter += 1
			table.insert(exits, descendant)
			table.insert(tpoptions, "exit__" .. tostring(exitcounter))
		end
	end
end

local TeleportTab = Window:CreateTab("ðŸŽ­Home2", nil) -- Title, Image
local Section = TeleportTab:CreateSection("areas")
local Section2 = TeleportTab:CreateSection("entities")
local Section3 = TeleportTab:CreateSection("players")

local Dropdown = Section:CreateDropdown({
	Name = "select destination",
	Options = tpoptions,
	CurrentOption = {tpoptions[1]},
	MultipleOptions = false,
	Flag = "teleport-a",
	Callback = function(Option)
		local newoption = string.split(Option, "__")

		if Option == "spawn" and plrspawn then
			plr.Character:PivotTo(plrspawn.CFrame * CFrame.new(0, 3 + (plrspawn.Size.Y / 2), 0))

		elseif Option == "shop" and shop then
			plr.Character:PivotTo(shop.Position + shop.CFrame.LookVector * 5)

		elseif newoption[1] == "exit" then
			local index = tonumber(newoption[2])
			if index and exits[index] then
				plr.Character:PivotTo(exits[index].CFrame * CFrame.new(0, 3 + (exits[index].Size.Y / 2), 0))
			end
		end
	end
})

local Toggle = Tab:CreateToggle({
	Name = "Tiny Task",
	CurrentValue = false,
	Flag = "Enable", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		print(Welcome!)
	end,
})
