local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local plr = game.Players.LocalPlayer

local conf = loadstring(game:HttpGet('https://raw.githubusercontent.com/none45/hub/refs/heads/main/exploit/hub_settings.lua'))()
local Window = Rayfield:CreateWindow(conf)

local MainTab = Window:CreateTab("universal", nil) -- Title, Image
local MainSection = MainTab:CreateSection("main")

Rayfield:Notify({
	Title = "script executed!!!",
	Content = "thanks for using nones hub",
	Duration = 6.5,
	Image = nil,
	Actions = { -- Notification Buttons
		Ignore = {
			Name = "okay!",
			Callback = function()
				--The user tapped Okay!
			end
		},
	},
})

local Dex = MainTab:CreateButton({
	Name = "dex explorer",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/peyton2465/Dex/master/out.lua"))()
	end,
})

local Orca = MainTab:CreateButton({
	Name = "orca hub",
	Callback = function()
		loadstring(
			game:HttpGetAsync("https://raw.githubusercontent.com/richie0866/orca/master/public/latest.lua")
		)()
	end,
})

local saveinstance = MainTab:CreateButton({
	Name = "saveinstance",
	Callback = function()
		local Params = {
			RepoURL = "https://raw.githubusercontent.com/luau/SynSaveInstance/main/",
			SSI = "saveinstance",
		}
		local synsaveinstance = loadstring(game:HttpGet(Params.RepoURL .. Params.SSI .. ".luau", true), Params.SSI)()
		local Options = {} -- Documentation here https://luau.github.io/UniversalSynSaveInstance/api/SynSaveInstance
		synsaveinstance(Options)
	end,
})

local Divider = MainTab:CreateDivider()

local Lighting = game:GetService("Lighting")

local fullbright = false
local FULLBRIGHT_COLOR = Color3.new(1, 1, 1)

local originalSettings = {
	Ambient = Lighting.Ambient,
	ColorShift_Bottom = Lighting.ColorShift_Bottom,
	ColorShift_Top = Lighting.ColorShift_Top
}

local function setFullbright()
	Lighting.Ambient = FULLBRIGHT_COLOR
	Lighting.ColorShift_Bottom = FULLBRIGHT_COLOR
	Lighting.ColorShift_Top = FULLBRIGHT_COLOR
end

local function revertLighting()
	Lighting.Ambient = originalSettings.Ambient
	Lighting.ColorShift_Bottom = originalSettings.ColorShift_Bottom
	Lighting.ColorShift_Top = originalSettings.ColorShift_Top
end

local fullbright = MainTab:CreateToggle({
	Name = "fullbright",
	CurrentValue = fullbright,
	Flag = "fullbright",
	Callback = function(Value)
		fullbright = Value
		if fullbright then
			setFullbright()
		else
			revertLighting()
		end
	end,
})

Lighting.LightingChanged:Connect(function()
	if Lighting.Ambient ~= FULLBRIGHT_COLOR then
		originalSettings.Ambient = Lighting.Ambient
	end
	if Lighting.ColorShift_Bottom ~= FULLBRIGHT_COLOR then
		originalSettings.ColorShift_Bottom = Lighting.ColorShift_Bottom
	end
	if Lighting.ColorShift_Top ~= FULLBRIGHT_COLOR then
		originalSettings.ColorShift_Top = Lighting.ColorShift_Top
	end
	if fullbright then
		setFullbright()
	end
end)


--[[local Slider = MainTab:CreateSlider({
	Name = "Walkspeed Slider ðŸŽ¨",
	Range = {0, 400},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 16,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
	end,
})]]

local tpoptions = {}
local exits = {}
local exitcounter = 0

local plrspawn = workspace.Map:FindFirstChild("SpawnLocation")
if plrspawn then
	table.insert(tpoptions, "spawn")
end

local shop = nil
if workspace:FindFirstChild("CurrentRooms") and workspace.CurrentRooms:FindFirstChild("Shop") then
	shop = workspace.CurrentRooms.Shop.Hendron.PrimaryPart
	table.insert(tpoptions, "shop")
elseif workspace:FindFirstChild("SpecialRooms") and workspace.SpecialRooms:FindFirstChild("Shop") then
	shop = workspace.SpecialRooms.Shop.Hendron.PrimaryPart
	table.insert(tpoptions, "shop")
end

for _, descendant in ipairs(workspace:GetDescendants()) do
	if descendant:IsA("BasePart") and descendant.Name == "inside" then
		local parent = descendant.Parent
		if parent and parent:IsA("Folder") and parent.Name == "Elevator" then
			exitcounter += 1
			table.insert(exits, descendant)
			table.insert(tpoptions, "exit " .. tostring(exitcounter))
		end
	end
end

local itemlist = {} for i,v in pairs(game.ReplicatedStorage.DroppedItems:GetChildren()) do table.insert(itemlist,v.Name) end
local milklist = {} for i,v in pairs(game.ReplicatedStorage.DroppedMilk:GetChildren()) do table.insert(itemlist,v.Name) end
local ammolist = {} for i,v in pairs(game.ReplicatedStorage.DroppedAmmo:GetChildren()) do table.insert(itemlist,v.Name) end
local entitylist = {} for i,v in pairs(game.ReplicatedStorage.Entities:GetChildren()) do table.insert(itemlist,v.Name) end

local itemlist2 = {"ALL ITEMS"}
for i,v in pairs(game.ReplicatedStorage.DroppedItems:GetChildren()) do
	table.insert(itemlist2,v.Name)
end

local milklist2 = {"ALL MILK"}
for i,v in pairs(game.ReplicatedStorage.DroppedMilk:GetChildren()) do
	table.insert(milklist2,v.Name)
end

local ammolist2 = {"ALL AMMO"}
for i,v in pairs(game.ReplicatedStorage.DroppedAmmo:GetChildren()) do
	table.insert(ammolist2,v.Name)
end

local entitylist2 = {"ALL ENTITIES"}
for i,v in pairs(game.ReplicatedStorage.Entities:GetChildren()) do
	table.insert(entitylist2,v.Name)
end

local ESPTab = Window:CreateTab("esp", nil)

local selectedItems = {Item=nil,Milk=nil,Ammo=nil,Entity=nil}

local function getAverageColor(model)
	local total = Vector3.new(0,0,0)
	local count = 0
	for _,desc in pairs(model:GetDescendants()) do
		if desc:IsA("BasePart") then
			local c = desc.Color
			total += Vector3.new(c.R, c.G, c.B)
			count += 1
		end
	end
	if count == 0 then return Color3.new(1,1,1) end
	total /= count
	return Color3.new(total.X, total.Y, total.Z)
end

local function createESP(model)
	if not model:FindFirstChild("SelectionPart") then return end
	if model:FindFirstChild("BillboardESP") then return end

	local color = getAverageColor(model)
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "BillboardESP"
	billboard.Size = UDim2.new(0,100,0,100)
	billboard.AlwaysOnTop = true
	billboard.LightInfluence = 0
	billboard.ResetOnSpawn = false
	billboard.Adornee = model.SelectionPart
	billboard.Parent = model

	local top = Instance.new("Frame")
	top.Size = UDim2.new(1,0,0.05,0)
	top.Position = UDim2.new(0,0,0,0)
	top.BackgroundColor3 = color
	top.BorderSizePixel = 0
	top.Parent = billboard

	local bottom = Instance.new("Frame")
	bottom.Size = UDim2.new(1,0,0.05,0)
	bottom.Position = UDim2.new(0,0,0.95,0)
	bottom.BackgroundColor3 = color
	bottom.BorderSizePixel = 0
	bottom.Parent = billboard

	local left = Instance.new("Frame")
	left.Size = UDim2.new(0.05,0,1,0)
	left.Position = UDim2.new(0,0,0,0)
	left.BackgroundColor3 = color
	left.BorderSizePixel = 0
	left.Parent = billboard

	local right = Instance.new("Frame")
	right.Size = UDim2.new(0.05,0,1,0)
	right.Position = UDim2.new(0.95,0,0,0)
	right.BackgroundColor3 = color
	right.BorderSizePixel = 0
	right.Parent = billboard

	local label = Instance.new("TextLabel")
	label.AnchorPoint = Vector2.new(0,1)
	label.Position = UDim2.new(1,0,0,0)
	label.Size = UDim2.new(1,0,0.2,0)
	label.BackgroundTransparency = 1
	label.Text = model.Name
	label.TextColor3 = color
	label.TextStrokeTransparency = 0.5
	label.TextScaled = true
	label.Parent = billboard
end

local function validForESP(model)
	if not model:IsA("Model") or not model:FindFirstChild("SelectionPart") then return false end
	if selectedItems.Item then
		if selectedItems.Item == "ALL ITEMS" and table.find(itemlist2, model.Name) then return true end
		if model.Name == selectedItems.Item then return true end
	end
	if selectedItems.Milk then
		if selectedItems.Milk == "ALL MILK" and table.find(milklist2, model.Name) then return true end
		if model.Name == selectedItems.Milk then return true end
	end
	if selectedItems.Ammo then
		if selectedItems.Ammo == "ALL AMMO" and table.find(ammolist2, model.Name) then return true end
		if model.Name == selectedItems.Ammo then return true end
	end
	if selectedItems.Entity then
		if selectedItems.Entity == "ALL ENTITIES" and table.find(entitylist2, model.Name) then return true end
		if model.Name == selectedItems.Entity then return true end
	end
	return false
end

local function scanWorkspace()
	for _,m in pairs(workspace:GetDescendants()) do
		if validForESP(m) then
			createESP(m)
		end
	end
	for _,m in pairs(workspace.CurrentEntities:GetChildren()) do
		if validForESP(m) then
			createESP(m)
		end
	end
end

workspace.DescendantAdded:Connect(function(desc)
	if validForESP(desc) then
		createESP(desc)
	end
end)

workspace.CurrentEntities.ChildAdded:Connect(function(ent)
	if validForESP(ent) then
		createESP(ent)
	end
end)

-- DROPDOWNS
ESPTab:CreateDropdown({
	Name = "items esp",
	Options = itemlist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-items",
	Callback = function(opt)
		selectedItems.Item = opt[1]
		scanWorkspace()
	end
})

ESPTab:CreateDropdown({
	Name = "milk esp",
	Options = milklist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-milk",
	Callback = function(opt)
		selectedItems.Milk = opt[1]
		scanWorkspace()
	end
})

ESPTab:CreateDropdown({
	Name = "ammo esp",
	Options = ammolist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-ammo",
	Callback = function(opt)
		selectedItems.Ammo = opt[1]
		scanWorkspace()
	end
})

ESPTab:CreateDropdown({
	Name = "entities esp",
	Options = entitylist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-entities",
	Callback = function(opt)
		selectedItems.Entity = opt[1]
		scanWorkspace()
	end
})

scanWorkspace()

local WeaponsTab = Window:CreateTab("items", nil) -- Title, Image

local SpawnSection = WeaponsTab:CreateSection("spawn")

local chosenweapon = "1911"
local chosenammo = "ACP45"
local chosenmilk = "GlassOfMilk"

local spawnweapon = WeaponsTab:CreateButton({
	Name = "spawn item",
	Callback = function()
		local arg1 = chosenweapon
		local clone = game.ReplicatedStorage.DroppedItems:FindFirstChild(arg1):Clone()
		clone.Parent = game.Workspace
		clone:MoveTo(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position)
	end,
})

local Dropdown = WeaponsTab:CreateDropdown({
	Name = "select item",
	Options = itemlist,
	CurrentOption = {chosenweapon},
	MultipleOptions = false,
	Flag = "item-a",
	Callback = function(Option)
		chosenweapon = Option[1]
	end
})

local spawnammo = WeaponsTab:CreateButton({
	Name = "spawn ammo",
	Callback = function()
		local arg1 = chosenammo
		local clone = game.ReplicatedStorage.DroppedAmmo:FindFirstChild(arg1):Clone()
		clone.Parent = game.Workspace
		clone:MoveTo(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position)
	end,
})

local Dropdown = WeaponsTab:CreateDropdown({
	Name = "select ammo to spawn",
	Options = ammolist,
	CurrentOption = {chosenammo},
	MultipleOptions = false,
	Flag = "ammo-a",
	Callback = function(Option)
		chosenammo = Option[1]
	end
})

local spawnmilk = WeaponsTab:CreateButton({
	Name = "spawn milk",
	Callback = function()
		local arg1 = chosenmilk
		local clone = game.ReplicatedStorage.DroppedMilk:FindFirstChild(arg1):Clone()
		clone.Parent = game.Workspace
		clone:MoveTo(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position)
	end,
})

local Dropdown = WeaponsTab:CreateDropdown({
	Name = "select milk",
	Options = milklist,
	CurrentOption = {chosenmilk},
	MultipleOptions = false,
	Flag = "milk-a",
	Callback = function(Option)
		chosenmilk = Option[1]
	end
})

local selectedammoamount = 100

local chosenammotodrop = "ACP45"

local spawnmilk = WeaponsTab:CreateButton({
	Name = "drop ammo",
	Callback = function()
		local arg1 = selectedammoamount
		game.ReplicatedStorage.droppedammoEvent:FireServer(game.ReplicatedStorage.DroppedAmmo:FindFirstChild(chosenammotodrop),game.Players.LocalPlayer.Character, arg1)
	end,
})

local Input = WeaponsTab:CreateInput({
	Name = "drop amount",
	CurrentValue = tostring(selectedammoamount),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "ammo_input1",
	Callback = function(Text)
		selectedammoamount = tonumber(Text)
	end,
})

local Dropdown23 = WeaponsTab:CreateDropdown({
	Name = "select ammo to drop",
	Options = ammolist,
	CurrentOption = {chosenammotodrop},
	MultipleOptions = false,
	Flag = "ammo-b",
	Callback = function(Option)
		chosenammotodrop = Option[1]
	end
})

local AmmoSection = WeaponsTab:CreateSection("edit ammo (permanent)")

local selectedammoamountedit = 100

local editammo = WeaponsTab:CreateButton({
	Name = "permanently edit ammo for held gun",
	Callback = function()
		local tool = plr.Character:FindFirstChildWhichIsA("Tool")

		local ammoo = selectedammoamountedit

		if tool:FindFirstChild("gunlocalFA") and tool:FindFirstChild("GunServer") and tool:FindFirstChild("Remotes") then
			tool:FindFirstChild("Remotes").ChangeAmmoInside:FireServer(ammoo)
			tool.AmmoInside.Value = ammoo
			tool.Parent = game.Players.LocalPlayer.Backpack
			task.wait(0.1)
			tool.Parent = plr.Character
		end
	end,
})

local Input = WeaponsTab:CreateInput({
	Name = "edit amount",
	CurrentValue = tostring(selectedammoamountedit),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "ammo_input2",
	Callback = function(Text)
		selectedammoamountedit = tonumber(Text)
	end,
})

local MilkTab = Window:CreateTab("milk", nil) -- Title, Image

local DropSection = MilkTab:CreateSection("drop milk")

local milktodrop = 100

local spawnmilk = MilkTab:CreateButton({
	Name = "drop milk",
	Callback = function()
		game.ReplicatedStorage.DroppedMilkRemote:FireServer(game.Players.LocalPlayer.Character, milktodrop)
	end,
})

local Input = MilkTab:CreateInput({
	Name = "drop amount",
	CurrentValue = tostring(milktodrop),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "milk_input1",
	Callback = function(Text)
		milktodrop = tonumber(Text)
	end,
})


local TeleportTab = Window:CreateTab("teleport", nil) -- Title, Image
local Section = TeleportTab:CreateSection("areas")

local optionA = nil

local teleport1 = TeleportTab:CreateButton({
	Name = "teleport to area",
	Callback = function()
		local option = optionA
		local newoption = string.split(option, " ")

		if option == "spawn" and plrspawn then
			plr.Character:PivotTo(plrspawn.CFrame * CFrame.new(0, 3 + (plrspawn.Size.Y / 2), 0))

		elseif option == "shop" and shop then
			plr.Character:PivotTo(CFrame(shop.Position + shop.CFrame.LookVector * 5))

		elseif newoption[1] == "exit" then
			local index = tonumber(newoption[2])
			if index and exits[index] then
				plr.Character:PivotTo(exits[index].CFrame * CFrame.new(0, 3 + (exits[index].Size.Y / 2), 0))
			end
		end
	end,
})

local Dropdown = TeleportTab:CreateDropdown({
	Name = "select area",
	Options = tpoptions,
	CurrentOption = {},
	MultipleOptions = false,
	Flag = "teleport-a",
	Callback = function(Option)
		optionA = Option[1]
	end
})

local Section2 = TeleportTab:CreateSection("entities (unstable)")

local optionB = nil

local teleport2 = TeleportTab:CreateButton({
	Name = "teleport to entity (might be deadly)",
	Callback = function()
		local option = optionB
		plr.Character:PivotTo(workspace.CurrentEntities:FindFirstChild(option).PrimaryPart.CFrame)
	end,
})

local Dropdown2 = TeleportTab:CreateDropdown({
	Name = "select entity",
	Options = {},
	CurrentOption = {},
	MultipleOptions = false,
	Flag = "teleport-b",
	Callback = function(Option)
		optionB = Option[1]
	end
})

local pastnewtable = {}
task.spawn(function()
	while task.wait(1) do
		local newtable = {}
		for i,v in pairs(workspace.CurrentEntities:GetChildren()) do
			table.insert(newtable, v.Name)
		end
		if pastnewtable ~= newtable then
			Dropdown2:Refresh(newtable)
		end
		pastnewtable = newtable
	end
end)

local Section3 = TeleportTab:CreateSection("players")

local optionC = nil

local teleport3 = TeleportTab:CreateButton({
	Name = "teleport to player",
	Callback = function()
		local option = optionC
		plr.Character:PivotTo(game.Players:FindFirstChild(option).Character.PrimaryPart.CFrame)
	end,
})

local Dropdown3 = TeleportTab:CreateDropdown({
	Name = "select player",
	Options = {},
	CurrentOption = {},
	MultipleOptions = false,
	Flag = "teleport-c",
	Callback = function(Option)
		optionC = Option[1]
	end
})

local pastnewtable = {}
task.spawn(function()
	while task.wait(1) do
		local newtable = {}
		for i,v in pairs(game.Players:GetChildren()) do
			if v ~= plr then
				table.insert(newtable, v.Name)
			end
		end
		if pastnewtable ~= newtable then
			Dropdown3:Refresh(newtable)
		end
		pastnewtable = newtable
	end
end)

local MiscTab = Window:CreateTab("misc", nil) -- Title, Image
local Section = MiscTab:CreateSection("stuff")

local autofire,cooldown,equiplength = false,0.1,1.5

local updategun = MiscTab:CreateButton({
	Name = "change gun stats",
	Callback = function()
		local tool = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool")

		tool:SetAttribute("autofire_none",autofire)
		tool:SetAttribute("cooldown_none",cooldown)
		tool:SetAttribute("equip_length_none",equiplength)
		
		local alreadyinjected = tool:HasTag("edited_none")
		if alreadyinjected == false then
			tool:AddTag("edited_none")
			tool.Parent = game.Players.LocalPlayer.Backpack
			if tool:FindFirstChild("gunlocalFA") then
				tool:FindFirstChild("gunlocalFA"):Remove()
			end
			local localgunNONE = loadstring(game:HttpGet("https://raw.githubusercontent.com/none45/hub/refs/heads/main/exploit/universes/4438816234/extras/gunlocalNONE.lua"))()
			localgunNONE(tool)
			task.wait(0.1)
			tool.Parent = plr.Character
		end
	end,
})

local Toggle = MiscTab:CreateToggle({
	Name = "automatic fire",
	CurrentValue = autofire,
	Flag = "auto_toggle",
	Callback = function(Value)
		autofire = Value
	end,
})

local Input = MiscTab:CreateInput({
	Name = "cooldown (-1 for default)",
	CurrentValue = tostring(cooldown),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "cooldown_input",
	Callback = function(Text)
		cooldown = tonumber(Text)
	end,
})

local Input = MiscTab:CreateInput({
	Name = "equip length",
	CurrentValue = tostring(equiplength),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "equiplength_input",
	Callback = function(Text)
		equiplength = tonumber(Text)
	end,
})

local Divider = MiscTab:CreateDivider()

local doremovealone = false

local removealone = MiscTab:CreateToggle({
	Name = "disable alone (may not work)",
	CurrentValue = doremovealone,
	Flag = "doremovealone",
	Callback = function(Value)
		doremovealone = Value
	end,
})

task.spawn(function()
	while task.wait(0.1) do
		if plr.Character:FindFirstChild("AloneLocalScript") then
			plr.Character.AloneLocalScript.Enabled = doremovealone
		end
	end
end)

local Section = MiscTab:CreateSection("softlock")

local playerschosen = {}

local softlock = MiscTab:CreateButton({
	Name = "softlock selected players (WARNING: IT KILLS YOU)",
	Callback = function()
		for _,v in pairs(playerschosen) do
			local chosen = game.Players:FindFirstChild(v)
			for i=1,5 do
				game.ReplicatedStorage:FindFirstChild("StarveEvent"):FireServer(chosen.Character)
				task.wait()
			end
		end
	end,
})

local Dropdown31 = TeleportTab:CreateDropdown({
	Name = "select players",
	Options = {},
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "players_to_softlock",
	Callback = function(Option)
		playerschosen = Option
	end
})

local pastnewtable = {}
task.spawn(function()
	while task.wait(1) do
		local newtable = {}
		for i,v in pairs(game.Players:GetChildren()) do
			if v ~= plr then
				table.insert(newtable, v.Name)
			end
		end
		if pastnewtable ~= newtable then
			Dropdown31:Refresh(newtable)
		end
		pastnewtable = newtable
	end
end)
