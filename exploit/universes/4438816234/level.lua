local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local plr = game.Players.LocalPlayer

local conf = loadstring(game:HttpGet('https://raw.githubusercontent.com/none45/hub/refs/heads/main/exploit/hub_settings.lua'))()
local Window = Rayfield:CreateWindow(conf[1])
local MainTab = Window:CreateTab("universal", nil) -- Title, Image
conf[2](MainTab)

--[[local Slider = MainTab:CreateSlider({
	Name = "Walkspeed Slider ðŸŽ¨",
	Range = {0, 400},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 16,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
	end,
})]]

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.Parent = game:WaitForChild("CoreGui")

local circle = Instance.new("Frame")
circle.AnchorPoint = Vector2.new(0.5, 0.5)
circle.Position = UDim2.new(0.5, 0, 0.5, 0)
circle.BackgroundTransparency = 1
circle.Size = UDim2.new(0, 0, 0, 0)
circle.Parent = gui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(1, 0)
corner.Parent = circle

local squarify = Instance.new("UIAspectRatioConstraint")
squarify.AspectRatio = 1
squarify.Parent = circle

local stroke = Instance.new("UIStroke")
stroke.Color = Color3.fromRGB(255, 0, 0)
stroke.Thickness = 1
stroke.Parent = circle

local ratio = 1.4

RunService.RenderStepped:Connect(function()
	local circleSize = (player.Character:FindFirstChildWhichIsA("Tool") and player.Character:FindFirstChildWhichIsA("Tool"):GetAttribute("aimbot_none")) or 0
	local scale = circleSize * ratio

	circle.Size = UDim2.new(scale, 0, scale, 0)

    circle.Visible = circleSize > 0
end)

local tpoptions = {}
local exits = {}
local exitcounter = 0

local plrspawn = workspace.Map:FindFirstChild("SpawnLocation")
if plrspawn then
	table.insert(tpoptions, "spawn")
end

local shop = nil
if workspace:FindFirstChild("CurrentRooms") and workspace.CurrentRooms:FindFirstChild("Shop") then
	shop = workspace.CurrentRooms.Shop.Hendron.PrimaryPart
	table.insert(tpoptions, "shop")
elseif workspace:FindFirstChild("SpecialRooms") and workspace.SpecialRooms:FindFirstChild("Shop") then
	shop = workspace.SpecialRooms.Shop.Hendron.PrimaryPart
	table.insert(tpoptions, "shop")
end

for _, descendant in ipairs(workspace:GetDescendants()) do
	if descendant:IsA("BasePart") and descendant.Name == "inside" then
		local parent = descendant.Parent
		if parent and parent:IsA("Folder") and parent.Name == "Elevator" then
			exitcounter += 1
			table.insert(exits, descendant)
			table.insert(tpoptions, "exit " .. tostring(exitcounter))
		end
	end
end

local itemlist = {} for i,v in pairs(game.ReplicatedStorage.DroppedItems:GetChildren()) do table.insert(itemlist,v.Name) end
local milklist = {} for i,v in pairs(game.ReplicatedStorage.DroppedMilk:GetChildren()) do table.insert(milklist,v.Name) end
local ammolist = {} for i,v in pairs(game.ReplicatedStorage.DroppedAmmo:GetChildren()) do table.insert(ammolist,v.Name) end
local entitylist = {} for i,v in pairs(game.ReplicatedStorage.Entities:GetChildren()) do table.insert(entitylist,v.Name) end

local itemlist2 = {"ALL ITEMS"}
for i,v in pairs(game.ReplicatedStorage.DroppedItems:GetChildren()) do
	table.insert(itemlist2,v.Name)
end

local milklist2 = {"ALL MILK"}
for i,v in pairs(game.ReplicatedStorage.DroppedMilk:GetChildren()) do
	table.insert(milklist2,v.Name)
end

local ammolist2 = {"ALL AMMO"}
for i,v in pairs(game.ReplicatedStorage.DroppedAmmo:GetChildren()) do
	table.insert(ammolist2,v.Name)
end

local entitylist2 = {"ALL ENTITIES"}
for i,v in pairs(game.ReplicatedStorage.Entities:GetChildren()) do
	table.insert(entitylist2,v.Name)
end

--local ESPTab = Window:CreateTab("esp", nil)

local selectedItems = {Item=nil,Milk=nil,Ammo=nil,Entity=nil}

local presetcolors = {
	Alone = Color3.fromRGB(35,35,35),
	Sprinter = Color3.fromRGB(55,55,55),
	Scamper = Color3.fromRGB(55,35,35),
	Crawler = Color3.fromRGB(205,205,205),
	CrimsonConcrete = Color3.fromRGB(165,155,122),
	Spore = Color3.fromRGB(127,77,55),
	Roomtaker = Color3.fromRGB(80,50,50),
	Purge = Color3.fromRGB(155,155,155),

	Jonkler = Color3.fromRGB(0,255,0),

	["1911"] = Color3.fromRGB(99,66,33),
	AK47 = Color3.fromRGB(99,55,33),
	["PPSH-41"] = Color3.fromRGB(155,77,33),
	HoneyBadger = Color3.fromRGB(165,155,125),
	M82 = Color3.fromRGB(22,22,22),
	MP7 = Color3.fromRGB(33,33,33),
	Remington870 = Color3.fromRGB(99,55,33),
	Revolver = Color3.fromRGB(200,200,200),
	TBS = Color3.fromRGB(99,55,33),
	HomeMadeShotgun = Color3.fromRGB(212,212,212),

	Knife = Color3.fromRGB(166,166,166),
	Flashlight = Color3.fromRGB(40,30,0),
	Lighter = Color3.fromRGB(188,160,99),

	["Saiga-12K"] = Color3.fromRGB(255,0,255),
	BigIron = Color3.fromRGB(255,0,255),
	DesertEagle = Color3.fromRGB(255,0,255),

	Wood = Color3.fromRGB(155,99,33),
	Metal = Color3.fromRGB(155,155,155),
	Glass = Color3.fromRGB(100,160,180),

	Wheat = Color3.fromRGB(180,140,90),
	MetalPipe = Color3.fromRGB(212,212,212),

	Bread = Color3.fromRGB(180,120,70),
	Cheese = Color3.fromRGB(255,215,100),
	BloxyCola = Color3.fromRGB(130,80,50),
	Chips = Color3.fromRGB(255,222,60),
	Chocolate = Color3.fromRGB(100,50,0),
	Soda = Color3.fromRGB(100,155,100),
	Pizza = Color3.fromRGB(133,100,66),

	HalfWoodWall = Color3.fromRGB(155,88,22),
	WoodWall = Color3.fromRGB(155,88,22),
	WoodDoor = Color3.fromRGB(155,88,22),
	Window = Color3.fromRGB(80,140,160),
	LightBulb = Color3.fromRGB(188,155,88),

	HomeCore = Color3.fromRGB(255,255,255),

	Ted = Color3.fromRGB(255,255,255),
}

local function getAverageColor(model)
	local total = Vector3.new(0,0,0)
	local count = 0
	for _,desc in pairs(model:GetDescendants()) do
		if desc:IsA("BasePart") then
			local c = desc.Color
			total += Vector3.new(c.R, c.G, c.B)
			count += 1
		end
	end
	if count == 0 then return Color3.new(1,1,1) end
	total /= count
	local endcolor = Color3.new(total.X, total.Y, total.Z)
	if table.find(presetcolors,model.Name) then
		endcolor = presetcolors[model.Name]
	end
	return endcolor
end

local function removeESP(model)
	if model and model:FindFirstChild("BillboardESP") then model:FindFirstChild("BillboardESP"):Remove() end
end

local function createESP(model)
	if model:FindFirstChild("BillboardESP") then return end

	local color = getAverageColor(model)
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "BillboardESP"
	local sizee = 0.5
	if model.PrimaryPart ~= nil then sizee = (model.PrimaryPart.Size.X+model.PrimaryPart.Size.Y+model.PrimaryPart.Size.Z)/3 end
	local x = math.max(2,math.min(10,(5*(sizee))))
	billboard.Size = UDim2.new(x,0,x,0)
	billboard.AlwaysOnTop = true
	billboard.LightInfluence = 0
	billboard.ResetOnSpawn = false
	billboard.ClipsDescendants = false
	--billboard.Adornee = model.SelectionPart
	billboard.Parent = model

	local top = Instance.new("Frame")
	top.Size = UDim2.new(1,0,0.05,0)
	top.Position = UDim2.new(0,0,0,0)
	top.BackgroundColor3 = color
	top.BorderSizePixel = 0
	top.Parent = billboard

	local bottom = Instance.new("Frame")
	bottom.Size = UDim2.new(1,0,0.05,0)
	bottom.Position = UDim2.new(0,0,0.95,0)
	bottom.BackgroundColor3 = color
	bottom.BorderSizePixel = 0
	bottom.Parent = billboard

	local left = Instance.new("Frame")
	left.Size = UDim2.new(0.05,0,1,0)
	left.Position = UDim2.new(0,0,0,0)
	left.BackgroundColor3 = color
	left.BorderSizePixel = 0
	left.Parent = billboard

	local right = Instance.new("Frame")
	right.Size = UDim2.new(0.05,0,1,0)
	right.Position = UDim2.new(0.95,0,0,0)
	right.BackgroundColor3 = color
	right.BorderSizePixel = 0
	right.Parent = billboard

	local label = Instance.new("TextLabel")
	label.AnchorPoint = Vector2.new(0,1)
	label.Position = UDim2.new(1,0,0,0)
	label.Size = UDim2.new(1,0,0.2,0)
	label.BackgroundTransparency = 1
	label.Text = model.Name
	label.TextColor3 = color
	label.TextStrokeTransparency = 0.5
	label.TextScaled = true
	label.Parent = billboard
end

local function validForESP(model)
	if not model:IsA("Model") or not model:FindFirstChild("SelectionPart") then return false end
	if selectedItems.Item then
		if selectedItems.Item == "ALL ITEMS" and table.find(itemlist2, model.Name) then return true end
		if model.Name == selectedItems.Item then return true end
	end
	if selectedItems.Milk then
		if selectedItems.Milk == "ALL MILK" and table.find(milklist2, model.Name) then return true end
		if model.Name == selectedItems.Milk then return true end
	end
	if selectedItems.Ammo then
		if selectedItems.Ammo == "ALL AMMO" and table.find(ammolist2, model.Name) then return true end
		if model.Name == selectedItems.Ammo then return true end
	end
	if selectedItems.Entity then
		if selectedItems.Entity == "ALL ENTITIES" and table.find(entitylist2, model.Name) then return true end
		if model.Name == selectedItems.Entity then return true end
	end
	return false
end

local function scanWorkspace()
	for _,m in pairs(workspace:GetDescendants()) do
		if validForESP(m) then
			createESP(m)
		else
			removeESP(m)
		end
	end
	for _,m in pairs(workspace.CurrentEntities:GetChildren()) do
		if validForESP(m) then
			createESP(m)
		else
			removeESP(m)
		end
	end
end

workspace.DescendantAdded:Connect(function(desc)
	if validForESP(desc) then
		createESP(desc)
	else
		removeESP(m)
	end
end)

workspace.CurrentEntities.ChildAdded:Connect(function(ent)
	if validForESP(ent) then
		createESP(ent)
	else
		removeESP(m)
	end
end)

-- DROPDOWNS
--[[ESPTab:CreateDropdown({
	Name = "items esp",
	Options = itemlist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-items",
	Callback = function(opt)
		selectedItems.Item = opt[1]
		scanWorkspace()
	end
})

ESPTab:CreateDropdown({
	Name = "milk esp",
	Options = milklist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-milk",
	Callback = function(opt)
		selectedItems.Milk = opt[1]
		scanWorkspace()
	end
})

ESPTab:CreateDropdown({
	Name = "ammo esp",
	Options = ammolist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-ammo",
	Callback = function(opt)
		selectedItems.Ammo = opt[1]
		scanWorkspace()
	end
})

ESPTab:CreateDropdown({
	Name = "entities esp",
	Options = entitylist2,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "esp-entities",
	Callback = function(opt)
		selectedItems.Entity = opt[1]
		scanWorkspace()
	end
})

scanWorkspace()]]

local WeaponsTab = Window:CreateTab("items", nil) -- Title, Image

local SpawnSection = WeaponsTab:CreateSection("spawn")

local chosenweapon = "1911"
local chosenammo = "ACP45"
local chosenmilk = "GlassOfMilk"

local spawnweapon = WeaponsTab:CreateButton({
	Name = "spawn item",
	Callback = function()
		local arg1 = chosenweapon
		local clone = game.ReplicatedStorage.DroppedItems:FindFirstChild(arg1):Clone()
		clone.Parent = game.Workspace
		clone:MoveTo(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position)
	end,
})

local Dropdown = WeaponsTab:CreateDropdown({
	Name = "select item",
	Options = itemlist,
	CurrentOption = {chosenweapon},
	MultipleOptions = false,
	Flag = "item-a",
	Callback = function(Option)
		chosenweapon = Option[1]
	end
})

local spawnammo = WeaponsTab:CreateButton({
	Name = "spawn ammo",
	Callback = function()
		local arg1 = chosenammo
		local clone = game.ReplicatedStorage.DroppedAmmo:FindFirstChild(arg1):Clone()
		clone.Parent = game.Workspace
		clone:MoveTo(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position)
	end,
})

local Dropdown = WeaponsTab:CreateDropdown({
	Name = "select ammo to spawn",
	Options = ammolist,
	CurrentOption = {chosenammo},
	MultipleOptions = false,
	Flag = "ammo-a",
	Callback = function(Option)
		chosenammo = Option[1]
	end
})

local spawnmilk = WeaponsTab:CreateButton({
	Name = "spawn milk",
	Callback = function()
		local arg1 = chosenmilk
		local clone = game.ReplicatedStorage.DroppedMilk:FindFirstChild(arg1):Clone()
		clone.Parent = game.Workspace
		clone:MoveTo(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position)
	end,
})

local Dropdown = WeaponsTab:CreateDropdown({
	Name = "select milk",
	Options = milklist,
	CurrentOption = {chosenmilk},
	MultipleOptions = false,
	Flag = "milk-a",
	Callback = function(Option)
		chosenmilk = Option[1]
	end
})

local selectedammoamount = 100

local chosenammotodrop = "ACP45"

local spawnmilk = WeaponsTab:CreateButton({
	Name = "drop ammo",
	Callback = function()
		local arg1 = selectedammoamount
		game.ReplicatedStorage.droppedammoEvent:FireServer(game.ReplicatedStorage.DroppedAmmo:FindFirstChild(chosenammotodrop),game.Players.LocalPlayer.Character, arg1)
	end,
})

local Input = WeaponsTab:CreateInput({
	Name = "drop amount",
	CurrentValue = tostring(selectedammoamount),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "ammo_input1",
	Callback = function(Text)
		selectedammoamount = tonumber(Text)
	end,
})

local Dropdown23 = WeaponsTab:CreateDropdown({
	Name = "select ammo to drop",
	Options = ammolist,
	CurrentOption = {chosenammotodrop},
	MultipleOptions = false,
	Flag = "ammo-b",
	Callback = function(Option)
		chosenammotodrop = Option[1]
	end
})

local AmmoSection = WeaponsTab:CreateSection("edit ammo (permanent)")

local selectedammoamountedit = 100

local editammo = WeaponsTab:CreateButton({
	Name = "permanently edit ammo for held gun",
	Callback = function()
		local tool = plr.Character:FindFirstChildWhichIsA("Tool")

		local ammoo = selectedammoamountedit

		if tool:FindFirstChild("gunlocalFA") and tool:FindFirstChild("GunServer") and tool:FindFirstChild("Remotes") then
			tool:FindFirstChild("Remotes").ChangeAmmoInside:FireServer(ammoo)
			tool.AmmoInside.Value = ammoo
			tool.Parent = game.Players.LocalPlayer.Backpack
			task.wait(0.1)
			tool.Parent = plr.Character
		end
	end,
})

local Input = WeaponsTab:CreateInput({
	Name = "edit amount",
	CurrentValue = tostring(selectedammoamountedit),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "ammo_input2",
	Callback = function(Text)
		selectedammoamountedit = tonumber(Text)
	end,
})

local MilkTab = Window:CreateTab("milk", nil) -- Title, Image

local DropSection = MilkTab:CreateSection("drop milk")

local milktodrop = 100

local spawnmilk = MilkTab:CreateButton({
	Name = "drop milk",
	Callback = function()
		game.ReplicatedStorage.DroppedMilkRemote:FireServer(game.Players.LocalPlayer.Character, milktodrop)
	end,
})

local Input = MilkTab:CreateInput({
	Name = "drop amount",
	CurrentValue = tostring(milktodrop),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "milk_input1",
	Callback = function(Text)
		milktodrop = tonumber(Text)
	end,
})


local TeleportTab = Window:CreateTab("teleport", nil) -- Title, Image
local Section = TeleportTab:CreateSection("areas")

local optionA = nil

local teleport1 = TeleportTab:CreateButton({
	Name = "teleport to area",
	Callback = function()
		local option = optionA
		local newoption = string.split(option, " ")

		if option == "spawn" and plrspawn then
			plr.Character:PivotTo(plrspawn.CFrame * CFrame.new(0, 3 + (plrspawn.Size.Y / 2), 0))

		elseif option == "shop" and shop then
			plr.Character:PivotTo(shop.CFrame + shop.CFrame.LookVector * 5)

		elseif newoption[1] == "exit" then
			local index = tonumber(newoption[2])
			if index and exits[index] then
				plr.Character:PivotTo(exits[index].CFrame * CFrame.new(0, 3 + (exits[index].Size.Y / 2), 0))
			end
		end
	end,
})

local Dropdown = TeleportTab:CreateDropdown({
	Name = "select area",
	Options = tpoptions,
	CurrentOption = {},
	MultipleOptions = false,
	Flag = "teleport-a",
	Callback = function(Option)
		optionA = Option[1]
	end
})

local Section2 = TeleportTab:CreateSection("entities (unstable)")

local optionB = nil

local teleport2 = TeleportTab:CreateButton({
	Name = "teleport to entity (might be deadly)",
	Callback = function()
		local option = optionB
		plr.Character:PivotTo(workspace.CurrentEntities:FindFirstChild(option).PrimaryPart.CFrame)
	end,
})

local Dropdown2 = TeleportTab:CreateDropdown({
	Name = "select entity",
	Options = {},
	CurrentOption = {},
	MultipleOptions = false,
	Flag = "teleport-b",
	Callback = function(Option)
		optionB = Option[1]
	end
})

local pastnewtable1 = {}
task.spawn(function()
	while task.wait(1) do
		local newtable = {}
		for i,v in pairs(workspace.CurrentEntities:GetChildren()) do
			table.insert(newtable, v.Name)
		end
		if table.concat(pastnewtable1," , ") ~= table.concat(newtable," , ") then
			Dropdown2:Refresh(newtable)
		end
		pastnewtable1 = newtable
	end
end)

local Section3 = TeleportTab:CreateSection("players")

local optionC = nil

local teleport3 = TeleportTab:CreateButton({
	Name = "teleport to player",
	Callback = function()
		local option = optionC
		plr.Character:PivotTo(game.Players:FindFirstChild(option).Character.PrimaryPart.CFrame)
	end,
})

local Dropdown3 = TeleportTab:CreateDropdown({
	Name = "select player",
	Options = {},
	CurrentOption = {},
	MultipleOptions = false,
	Flag = "teleport-c",
	Callback = function(Option)
		optionC = Option[1]
	end
})

local pastnewtable2 = {}
task.spawn(function()
	while task.wait(1) do
		local newtable = {}
		for i,v in pairs(game.Players:GetChildren()) do
			if v ~= plr then
				table.insert(newtable, v.Name)
			end
		end
		if table.concat(pastnewtable2," , ") ~= table.concat(newtable," , ") then
			Dropdown3:Refresh(newtable)
		end
		pastnewtable2 = newtable
	end
end)

local MiscTab = Window:CreateTab("misc", nil) -- Title, Image
local Section = MiscTab:CreateSection("stuff")

local autofire,cooldown,equiplength,spreadd,bc,textshoot,gunshake,firemode,angleoffset,aimbot = false,0,0,0,1,"example",0,"normal",0,0

local updategun = MiscTab:CreateButton({
	Name = "change gun stats",
	Callback = function()
		local tool = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool")

		tool:SetAttribute("autofire_none",autofire)
		tool:SetAttribute("cooldown_none",cooldown)
		tool:SetAttribute("equip_length_none",equiplength)
		tool:SetAttribute("spread_none",spreadd)
		tool:SetAttribute("bullets_none",bc)
		tool:SetAttribute("text_none",textshoot)
		tool:SetAttribute("shake_none",gunshake)
		tool:SetAttribute("angle_none",angleoffset)
			
		tool:SetAttribute("aimbot_none",aimbot)
			
		tool:SetAttribute("mode_none",firemode)

		local alreadyinjected = tool:HasTag("edited_none")
		if alreadyinjected == false then
			tool:AddTag("edited_none")
			tool.Parent = game.Players.LocalPlayer.Backpack
			if tool:FindFirstChild("gunlocalFA") then
				tool:FindFirstChild("gunlocalFA"):Remove()
			end
			local localgunNONE = loadstring(game:HttpGet("https://raw.githubusercontent.com/none45/hub/refs/heads/main/exploit/universes/4438816234/extras/gunlocalNONE.lua"))()
			localgunNONE(tool)
			task.wait(0.1)
			tool.Parent = plr.Character
		end
	end,
})

local Toggle = MiscTab:CreateToggle({
	Name = "automatic fire",
	CurrentValue = autofire,
	Flag = "auto_toggle",
	Callback = function(Value)
		autofire = Value
	end,
})

local Input = MiscTab:CreateInput({
	Name = "cooldown (-1 for default)",
	CurrentValue = tostring(cooldown),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "cooldown_input",
	Callback = function(Text)
		cooldown = tonumber(Text)
	end,
})

local Input = MiscTab:CreateInput({
	Name = "equip length",
	CurrentValue = tostring(equiplength),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "equiplength_input",
	Callback = function(Text)
		equiplength = tonumber(Text)
	end,
})

local Input = MiscTab:CreateInput({
	Name = "spread",
	CurrentValue = tostring(spreadd),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "spread_input",
	Callback = function(Text)
		spreadd = tonumber(Text)
	end,
})

local Input = MiscTab:CreateInput({
	Name = "bullet count",
	CurrentValue = tostring(bc),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "bc_input",
	Callback = function(Text)
		bc = tonumber(Text)
	end,
})

local Input = MiscTab:CreateInput({
	Name = "screen shake",
	CurrentValue = gunshake,
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "screenshake_input",
	Callback = function(Text)
		gunshake = tonumber(Text)
	end,
})

local Input = MiscTab:CreateInput({
	Name = "aimbot",
	CurrentValue = tostring(aimbot),
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "ab_input",
	Callback = function(Text)
		aimbot = tonumber(Text)
	end,
})

local Dropdown313 = MiscTab:CreateDropdown({
	Name = "select bullet mode",
	Options = {
	    "normal",
	    "circle",
	    "triangle",
	    "square",
	    "pentagon",
	    "hexagon",
	    "heart",
	    "star",
		"text",
	},
	CurrentOption = {"normal"},
	MultipleOptions = false,
	Flag = "gunfiremode_select",
	Callback = function(Option)
		firemode = Option[1]
	end
})

local Input = MiscTab:CreateInput({
	Name = "text to shoot",
	CurrentValue = textshoot,
	PlaceholderText = "input text",
	RemoveTextAfterFocusLost = false,
	Flag = "textshoot_input",
	Callback = function(Text)
		textshoot = tostring(Text)
	end,
})

local Input = MiscTab:CreateInput({
	Name = "rotates everything (for shapes)",
	CurrentValue = angleoffset,
	PlaceholderText = "number",
	RemoveTextAfterFocusLost = false,
	Flag = "angle_input",
	Callback = function(Text)
		angleoffset = tonumber(Text)
	end,
})

local Divider = MiscTab:CreateDivider()

local killall = MiscTab:CreateToggle({
	Name = "auto kill all entities",
	CurrentValue = doremovealone,
	Flag = "dokillentities",
	Callback = function(Value)
		game.Players.LocalPlayer:SetAttribute("killall_none",value)
	end,
})

local killplrs = MiscTab:CreateToggle({
	Name = "auto kill all players",
	CurrentValue = doremovealone,
	Flag = "dokillplrs",
	Callback = function(Value)
		game.Players.LocalPlayer:SetAttribute("killplrs_none",value)
	end,
})

local deathhh = MiscTab:CreateButton({
	Name = "kill thyself",
	Callback = function()
		local chosen = game.Players.LocalPlayer
		for i=1,5 do
			game.ReplicatedStorage:FindFirstChild("StarveEvent"):FireServer(chosen.Character)
			task.wait()
		end
	end,
})
local nodeathhh = MiscTab:CreateButton({
	Name = "revive at once!!",
	Callback = function()
		local LocalPlayer_upvr = game.Players.LocalPlayer
		local Character = LocalPlayer_upvr.Character
		if not Character then
			Character = LocalPlayer_upvr.CharacterAdded:Wait()
		end
		local PlayerGui_upvr = LocalPlayer_upvr:WaitForChild("PlayerGui")
		local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
		local DeathRemotes = ReplicatedStorage_upvr.DeathRemotes
		local DeathSystem_upvr = PlayerGui_upvr.DeathSystem
		local TheInventorySystem_upvw = PlayerGui_upvr.TheInventorySystem
		local UnEquipRemote_upvw = TheInventorySystem_upvw.UnEquipRemote
		local BlueScreen_upvr = DeathSystem_upvr.BlueScreen
		local DeathBackround_upvr = DeathSystem_upvr.DeathBackround
		local DeathScreen_upvr = DeathSystem_upvr.DeathScreen
		local RespawnButtons_upvr = DeathScreen_upvr.RespawnButtons
		local RespawnEvent_upvr = ReplicatedStorage_upvr.RespawnEvent
		local TweenService_upvr = game:GetService("TweenService")
		local CheckDiedToEvent_upvr = ReplicatedStorage_upvr.CheckDiedToEvent
		local HoverSound_upvr = DeathScreen_upvr.HoverSound
		local FlipSound_upvr = DeathScreen_upvr.FlipSound
		local SoundService_upvr = game:GetService("SoundService")
		local AmbientReverb_upvr = SoundService_upvr.AmbientReverb
		local CurrentCamera_upvr = workspace.CurrentCamera
		local PlayerRemote_upvr = DeathRemotes.PlayerRemote
		
		function respawn()
			DeathBackround_upvr["Communicative Error Loop"]:Stop()
			DeathBackround_upvr["Communicative Error End"]:Play()
		    DeathScreen_upvr.Text.Visible = false
			DeathScreen_upvr.PressAnything.Visible = false
			game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
			PlayerRemote_upvr:FireServer()
			FlipSound_upvr:Play()
			DeathBackround_upvr.VhsSound:Stop()
			RespawnEvent_upvr:FireServer()
			DeathSystem_upvr.RespawnSound:Play()
			RespawnButtons_upvr.Visible = false
			DeathScreen_upvr.Visible = false
			DeathBackround_upvr.Visible = false
			BlueScreen_upvr.Visible = true
			BlueScreen_upvr.DeathVector1.Visible = true
			task.wait(0.05)
			BlueScreen_upvr.DeathVector1.Visible = false
			BlueScreen_upvr.DeathVector2.Visible = true
			task.wait(0.05)
			BlueScreen_upvr.DeathVector2.Visible = false
			BlueScreen_upvr.DeathVector3.Visible = true
			task.wait(0.05)
			BlueScreen_upvr.DeathVector3.Visible = false
			BlueScreen_upvr.Error.Visible = false
			BlueScreen_upvr["Respawn System engaging..."].Image = "rbxassetid://17651910739"
			task.wait(1)
			BlueScreen_upvr.DeathVector3.Visible = true
			task.wait(0.05)
			BlueScreen_upvr.DeathVector3.Visible = false
			BlueScreen_upvr.DeathVector2.Visible = true
			task.wait(0.05)
			BlueScreen_upvr.DeathVector2.Visible = false
			BlueScreen_upvr.DeathVector1.Visible = true
			SoundService_upvr.AmbientReverb = AmbientReverb_upvr
			BlueScreen_upvr.Visible = false
			for _, v_3 in ipairs(SoundService_upvr:GetChildren()) do
				if v_3:IsA("Sound") then
					v_3.PlaybackSpeed = 1
				end
			end
			task.wait(1)
			TheInventorySystem_upvw = PlayerGui_upvr.TheInventorySystem
			BlueScreen_upvr["Respawn System engaging..."].Image = "rbxassetid://17640423306"
			PlayerGui_upvr.MobileButtons.Sprint.SprintButton.Visible = true
			PlayerGui_upvr.MobileButtons.Crouch.CrouchButton.Visible = true
		end
		respawn()
	end,
})

local doremovealone = true

local removealone = MiscTab:CreateToggle({
	Name = "disable alone",
	CurrentValue = doremovealone,
	Flag = "doremovealone",
	Callback = function(Value)
		doremovealone = Value
	end,
})

task.spawn(function()
	while task.wait(0.1) do
		if plr.Character:FindFirstChild("AloneLocalScript") then
			plr.Character.AloneLocalScript.Enabled = not doremovealone
		end
	end
end)

local Section = MiscTab:CreateSection("softlock")

local playerschosen = {}

local softlock = MiscTab:CreateButton({
	Name = "softlock selected players (WARNING: IT KILLS YOU)",
	Callback = function()
		for _,v in pairs(playerschosen) do
			local chosen = game.Players:FindFirstChild(v)
			for i=1,5 do
				game.ReplicatedStorage:FindFirstChild("StarveEvent"):FireServer(chosen.Character)
				task.wait()
			end
		end
	end,
})

local Dropdown31 = MiscTab:CreateDropdown({
	Name = "select players",
	Options = {},
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "players_to_softlock",
	Callback = function(Option)
		playerschosen = Option
	end
})

local pastnewtable3 = {}
task.spawn(function()
	while task.wait(1) do
		local newtable = {}
		for i,v in pairs(game.Players:GetChildren()) do
			if v ~= plr then
				table.insert(newtable, v.Name)
			end
		end
		if table.concat(pastnewtable3," , ") ~= table.concat(newtable," , ") then
			Dropdown31:Refresh(newtable)
		end
		pastnewtable3 = newtable
	end
end)


local Section = MiscTab:CreateSection("debug or sum")


local wahh = MiscTab:CreateButton({
	Name = "manifest a stat display",
	Callback = function()
		local player = game:GetService("Players").LocalPlayer
		local gui = Instance.new("ScreenGui")
		gui.Name = "StatsGui"
		gui.Parent = game:WaitForChild("CoreGui")
		
		local frame = Instance.new("Frame")
		frame.Size = UDim2.new(0, 200, 0, 150)
		frame.Position = UDim2.new(0, 20, 0, 20)
		frame.Parent = gui
		
		local layout = Instance.new("UIListLayout")
		layout.FillDirection = Enum.FillDirection.Vertical
		layout.SortOrder = Enum.SortOrder.LayoutOrder
		layout.Padding = UDim.new(0, 5)
		layout.Parent = frame
		
		local deathsLabel = Instance.new("TextLabel")
		deathsLabel.Size = UDim2.new(1, 0, 0, 30)
		deathsLabel.TextScaled = true
		deathsLabel.Text = "Deaths: 0"
		deathsLabel.Parent = frame
		
		local damageLabel = Instance.new("TextLabel")
		damageLabel.Size = UDim2.new(1, 0, 0, 30)
		damageLabel.TextScaled = true
		damageLabel.Text = "Entities Damage: 0"
		damageLabel.Parent = frame
		
		local killedLabel = Instance.new("TextLabel")
		killedLabel.Size = UDim2.new(1, 0, 0, 30)
		killedLabel.TextScaled = true
		killedLabel.Text = "Entities Killed: 0"
		killedLabel.Parent = frame
		
		local deaths = player:WaitForChild("HasDiedTo"):WaitForChild("Deaths")
		local damage = player:WaitForChild("EntitiesDamage").Value
		local killed = player:WaitForChild("EntitiesKilled").Value
		
		local function updateStats()
			deathsLabel.Text = "Deaths: " .. tostring(deaths.Value)
			damageLabel.Text = "Entities Damage: " .. tostring(damage.Value)
			killedLabel.Text = "Entities Killed: " .. tostring(killed.Value)
		end
		
		deaths:GetPropertyChangedSignal("Value"):Connect(updateStats)
		damage:GetPropertyChangedSignal("Value"):Connect(updateStats)
		killed:GetPropertyChangedSignal("Value"):Connect(updateStats)
		
		updateStats()
	end,
})
