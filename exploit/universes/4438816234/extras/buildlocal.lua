return function(newParent)
	local function init()
		task.wait()

		local UserInputService = game:GetService("UserInputService")
		local Players = game:GetService("Players")
		local ReplicatedStorage = game:GetService("ReplicatedStorage")
		local TweenService = game:GetService("TweenService")
		local Camera = workspace.CurrentCamera
		
		local LocalPlayer = Players.LocalPlayer
		local PlayerGui = LocalPlayer.PlayerGui
		local Tool = script.Parent
		local Remotes = Tool:WaitForChild("Remotes")
		local BuildPreview = workspace:WaitForChild("BuildReplicatorPart")
		
		local EquippedRemote = Tool.Remotes:WaitForChild("Equipped")
		local PlaceRemote = Remotes:WaitForChild("Place")
		local DestroyRemote = Remotes.DestroyItemRemote
		local PlaceBuildRemoveEvent = ReplicatedStorage.PlaceBuildRemoveItemEvent
		local BuildModel = ReplicatedStorage.Builds[Tool.Name]
		
		local InventorySystem = PlayerGui.TheInventorySystem
		local HotbarLine = InventorySystem.InventoryMenu["Inventory Section"].Inv.HotbarLine
		local Hotbar = InventorySystem.Hotbar
		local Storage = InventorySystem.InventoryMenu["HomeCore Section"].Storage
		local UnEquipRemote = InventorySystem.UnEquipRemote
		local SlotSelected = InventorySystem.SlotSelected
		
		local XYZGui = PlayerGui.XYZ
		local XButton, YButton, ZButton = XYZGui.X, XYZGui.Y, XYZGui.Z
		local Checkmark = XYZGui.CheckmarkGUI
		
		local MobileUI = LocalPlayer.PlayerGui.MobileButtons
		local RotateUI = MobileUI:WaitForChild("Rotate")
		local RotateButton = RotateUI:WaitForChild("RotateButton")
		local ForwardUI = MobileUI:WaitForChild("MoveForward")
		local ForwardButton = ForwardUI:WaitForChild("ForwardButton")
		local BackwardUI = MobileUI:WaitForChild("MoveBackward")
		local BackwardButton = BackwardUI:WaitForChild("BackwardButton")
		
		local PlaceSound = Tool.PlaceSound
		
		-- State
		local isEquipped = false
		local movingForward = false
		local movingBackward = false
		local axisX, axisY, axisZ = true, false, false
		local canRotate = true
		local isRotating = false
		local previewCFrame = CFrame.new(Camera.CFrame.Position)
		local buildDistance = 8.25
		local rotation = Vector3.new(0,0,0)
		
		-- Setup button sizing for mobile
		local buttonSize = 500
		if math.min(RotateButton.Screen.AbsoluteSize.X, RotateButton.Screen.AbsoluteSize.Y) > 500 then
			buttonSize = 70
		else
			buttonSize = 120
		end
		
		local function setupMobileUI()
			if UserInputService.TouchEnabled then
				RotateUI.Enabled = true
				RotateButton.Size = UDim2.new(0, buttonSize, 0, buttonSize)
				ForwardUI.Enabled = true
				ForwardButton.Size = UDim2.new(0, buttonSize, 0, buttonSize)
				BackwardUI.Enabled = true
				BackwardButton.Size = UDim2.new(0, buttonSize, 0, buttonSize)
			end
		end
		
		-- Axis switching
		local function setAxis(x, y, z, xImg, yImg, zImg)
			axisX, axisY, axisZ = x, y, z
			XButton.Image, YButton.Image, ZButton.Image = xImg, yImg, zImg
		end
		
		-- Input listeners
		UserInputService.InputBegan:Connect(function(input)
			if not isEquipped then return end
			if input.KeyCode == Enum.KeyCode.V then movingForward = true end
			if input.KeyCode == Enum.KeyCode.B then movingBackward = true end
			if input.KeyCode == Enum.KeyCode.X then
				setAxis(true, false, false, "rbxassetid://16562623753", "rbxassetid://16562604900", "rbxassetid://16562606076")
			elseif input.KeyCode == Enum.KeyCode.Y then
				setAxis(false, true, false, "rbxassetid://16562628313", "rbxassetid://16562630011", "rbxassetid://16562606076")
			elseif input.KeyCode == Enum.KeyCode.Z then
				setAxis(false, false, true, "rbxassetid://16562628313", "rbxassetid://16562604900", "rbxassetid://16562632722")
			elseif input.KeyCode == Enum.KeyCode.R and canRotate then
				isRotating, canRotate = true, false
				if axisX then rotation += Vector3.new(45,0,0)
				elseif axisY then rotation += Vector3.new(0,45,0)
				elseif axisZ then rotation += Vector3.new(0,0,45) end
				task.wait(0.25)
				while isRotating do
					if axisX then rotation += Vector3.new(45,0,0)
					elseif axisY then rotation += Vector3.new(0,45,0)
					elseif axisZ then rotation += Vector3.new(0,0,45) end
					task.wait(0.25)
				end
				canRotate = true
			end
		end)
		
		UserInputService.InputEnded:Connect(function(input)
			if not isEquipped then return end
			if input.KeyCode == Enum.KeyCode.V then movingForward = false end
			if input.KeyCode == Enum.KeyCode.B then movingBackward = false end
			if input.KeyCode == Enum.KeyCode.R then isRotating = false end
		end)
		
		ForwardButton.MouseButton1Down:Connect(function() if isEquipped then movingForward = true end end)
		ForwardButton.MouseButton1Up:Connect(function() if isEquipped then movingForward = false end end)
		BackwardButton.MouseButton1Down:Connect(function() if isEquipped then movingBackward = true end end)
		BackwardButton.MouseButton1Up:Connect(function() if isEquipped then movingBackward = false end end)
		RotateButton.MouseButton1Down:Connect(function() if isEquipped and canRotate then isRotating, canRotate = true, false end end)
		RotateButton.MouseButton1Up:Connect(function() if isEquipped then isRotating = false end end)
		
		XButton.Activated:Connect(function() if isEquipped then setAxis(true, false, false, "rbxassetid://16562623753", "rbxassetid://16562604900", "rbxassetid://16562606076") end end)
		YButton.Activated:Connect(function() if isEquipped then setAxis(false, true, false, "rbxassetid://16562628313", "rbxassetid://16562630011", "rbxassetid://16562606076") end end)
		ZButton.Activated:Connect(function() if isEquipped then setAxis(false, false, true, "rbxassetid://16562628313", "rbxassetid://16562604900", "rbxassetid://16562632722") end end)
		
		-- Tool events
		Tool.Equipped:Connect(function()
			isEquipped = true
			setupMobileUI()
			XYZGui.Enabled = true
			setAxis(true, false, false, "rbxassetid://16562623753", "rbxassetid://16562604900", "rbxassetid://16562606076")
		
			rotation = Vector3.new(0,0,0)
			BuildPreview.CFrame = CFrame.new(Camera.CFrame.Position + Camera.CFrame.LookVector * buildDistance)
		
			-- build preview cloning
			for _, part in ipairs(BuildModel:GetDescendants()) do
				if part:IsA("MeshPart") or part:IsA("Part") then
					local clone = part:Clone()
					clone.Parent = BuildPreview
					clone.Position = BuildPreview.Position + part.Position
					if not (part.Name == "BarrierPart" or part.Name == "Epart" or part.Name == "PrimPart" or part.Name == "OpenPos") then
						clone.Transparency = 0.4
					end
					local weld = Instance.new("WeldConstraint")
					weld.Part0, weld.Part1 = BuildPreview, clone
					weld.Parent = clone
					clone.CollisionGroup = "Builds"
				end
			end
		
			while isEquipped do
				Camera = workspace.CurrentCamera
				local pos = Camera.CFrame.Position
				if movingForward and buildDistance < 12.5 then buildDistance += 0.3 end
				if movingBackward and buildDistance > 4 then buildDistance -= 0.3 end
		
				local targetCFrame = CFrame.new(pos + Camera.CFrame.LookVector * buildDistance) * 
					CFrame.fromEulerAnglesXYZ(math.rad(rotation.X), math.rad(rotation.Y), math.rad(rotation.Z))
		
				TweenService:Create(BuildPreview, TweenInfo.new(0.25), { CFrame = targetCFrame }):Play()
				task.wait()
			end
		end)
		
		Tool.Unequipped:Connect(function()
			isEquipped = false
			XYZGui.Enabled = false
			RotateUI.Enabled = false
			ForwardUI.Enabled = false
			BackwardUI.Enabled = false
			BuildPreview:ClearAllChildren()
		end)
		
		Tool.Activated:Connect(function()
			if not isEquipped then return end
			PlaceSound:Play()
			-- placement logic continues...
		end)
	end
	local function boot()
		init()
	end
	boot()
end
