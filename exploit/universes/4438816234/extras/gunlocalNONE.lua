return function(newParent)
	local function init()
		if newParent.Parent:FindFirstChild("Humanoid") then
			task.wait(0.1)
			local UserInputService_upvr = game:GetService("UserInputService")
			local RunService = game:GetService("RunService")
			local Players_upvr = game:GetService("Players")
			local ReplicatedStorage = game:GetService("ReplicatedStorage")
			local CurrentCamera_upvw = workspace.CurrentCamera
			--[[local any_new_result1_upvr = require(ReplicatedStorage:WaitForChild("CameraShaker")).new(Enum.RenderPriority.Camera.Value, function(arg1)
				local var39 = CurrentCamera_upvw
				var39.CFrame *= arg1
			end)]]
			local LocalPlayer_upvw = Players_upvr.LocalPlayer
			local mouse_upvw = LocalPlayer_upvw:GetMouse()
			local Parent_upvr = newParent
			local Remotes_upvr = Parent_upvr:WaitForChild("Remotes")
			local var45_upvw = false
			local hammerclick_upvr = Parent_upvr:WaitForChild("hammerclick")
			local Character_2_upvw = LocalPlayer_upvw.Character
			if not Character_2_upvw then
				Character_2_upvw = LocalPlayer_upvw.CharacterAdded:Wait()
			end
			local Ammunition_upvw = LocalPlayer_upvw:WaitForChild("Ammunition")
			local FiveFiveSix_upvr = Ammunition_upvw:WaitForChild("FiveFiveSix")
			local tonumber_result1_upvr_2 = tonumber(Parent_upvr:GetAttribute("MagazineCapacity"))
			local Value_upvw = LocalPlayer_upvw:WaitForChild("AmmoInside"):WaitForChild(Parent_upvr.Name).Value
			local ChangeAmmoInside_upvr = Remotes_upvr:WaitForChild("ChangeAmmoInside")
			local AmmoInside_upvr = Parent_upvr.AmmoInside
			local var54_upvw = false
			local var55_upvw = false
			local PlayerGui_upvr = LocalPlayer_upvw:WaitForChild("PlayerGui")
			local var57_upvw = false
			local Reload_upvw = PlayerGui_upvr:WaitForChild("MobileButtons"):WaitForChild("Reload")
			local Aim_upvw = PlayerGui_upvr.MobileButtons:WaitForChild("Aim")
			local AimButton_upvr = Aim_upvw:WaitForChild("AimButton")
			local Shoot_upvw = PlayerGui_upvr.MobileButtons:WaitForChild("Shoot")
			local ShootButton_upvw = Shoot_upvw:WaitForChild("ShootButton")
			local ReloadButton_upvr = Reload_upvw:WaitForChild("ReloadButton")
			local Inspect_2_upvw = PlayerGui_upvr.MobileButtons:WaitForChild("Inspect")
			local InspectButton_upvr = Inspect_2_upvw:WaitForChild("InspectButton")
			local TheInventorySystem = PlayerGui_upvr:WaitForChild("TheInventorySystem")
			local Inv_upvr = TheInventorySystem.InventoryMenu:WaitForChild("Inventory Section"):WaitForChild("Inv")
			Parent_upvr:WaitForChild("Start"):WaitForChild("shotsound").Volume = 0
			local SlotSelected_upvw = TheInventorySystem:WaitForChild("SlotSelected")
			local Character_upvw = LocalPlayer_upvw.Character
			local var84_upvr = {}
			for _, v in pairs(Character_2_upvw:GetDescendants()) do
				if v:isA("BasePart") then
					table.insert(var84_upvr, v)
				end
			end
			for _, v_2 in pairs(Parent_upvr:GetDescendants()) do
				if v_2:isA("BasePart") then
					table.insert(var84_upvr, v_2)
				end
			end
			for _, v_3 in pairs(game.Workspace:GetDescendants()) do
				if v_3:isA("BasePart") and v_3.Transparency == 1 and v_3.Name ~= "Hitbox" and not ReplicatedStorage.Entities:FindFirstChild(v_3.Parent.Name) then
					table.insert(var84_upvr, v_3)
				end
			end
			for _, v_4 in pairs(workspace.HomeCores:GetDescendants()) do
				if v_4:isA("BasePart") then
					table.insert(var84_upvr, v_4)
				end
			end
			local DefaultMouse_upvw = LocalPlayer_upvw.PlayerGui.Mouse.DefaultMouse
			local CrossHair_upvw = LocalPlayer_upvw.PlayerGui.Mouse.CrossHair
			local EquipSoundlocal_upvr = Parent_upvr.EquipSoundlocal
			local Humanoid_upvr = game.Workspace:FindFirstChild(LocalPlayer_upvw.Name):WaitForChild("Humanoid")
			local any_LoadAnimation_result1_upvr_9 = Humanoid_upvr:LoadAnimation(Parent_upvr.EquipAnim)
			local EquipSound_upvr = Parent_upvr.Main.EquipSound
			local any_LoadAnimation_result1_upvr_8 = Humanoid_upvr:LoadAnimation(Parent_upvr.IdleAnim)
			any_LoadAnimation_result1_upvr_8.Looped = true
			any_LoadAnimation_result1_upvr_8.Priority = Enum.AnimationPriority.Action
			any_LoadAnimation_result1_upvr_9.Priority = Enum.AnimationPriority.Action3
			local var92_upvw = true
			local any_LoadAnimation_result1_upvr_6 = Humanoid_upvr:LoadAnimation(Parent_upvr:WaitForChild("ReloadAnim"))
			local ReloadSound_upvr = Parent_upvr.Main.ReloadSound
			local ReloadSoundLocal_upvr = Parent_upvr.ReloadSoundLocal
			any_LoadAnimation_result1_upvr_6.Priority = Enum.AnimationPriority.Action4
			local any_LoadAnimation_result1_upvr_10 = Humanoid_upvr:LoadAnimation(Parent_upvr:WaitForChild("ReloadAnim"))
			any_LoadAnimation_result1_upvr_10.Priority = Enum.AnimationPriority.Action4
			local any_LoadAnimation_result1_upvr_5 = Humanoid_upvr:LoadAnimation(Parent_upvr.AimBegin)
			any_LoadAnimation_result1_upvr_5.Priority = Enum.AnimationPriority.Action2
			local any_LoadAnimation_result1_upvr = Humanoid_upvr:LoadAnimation(Parent_upvr.Aim)
			any_LoadAnimation_result1_upvr.Looped = true
			any_LoadAnimation_result1_upvr.Priority = Enum.AnimationPriority.Action2
			local any_LoadAnimation_result1_upvr_4 = Humanoid_upvr:LoadAnimation(Parent_upvr.ShootAnim)
			any_LoadAnimation_result1_upvr_4.Priority = Enum.AnimationPriority.Action3
			local any_LoadAnimation_result1_upvr_2 = Humanoid_upvr:LoadAnimation(Parent_upvr.InspectAnim)
			any_LoadAnimation_result1_upvr_2.Priority = Enum.AnimationPriority.Action3
			local InspectSoundLocal_upvr = Parent_upvr.InspectSoundLocal
			local InspectSound_upvr = Parent_upvr.Main.InspectSound
			InspectSound_upvr.Volume = 0
			ReloadSound_upvr.Volume = 0
			EquipSound_upvr.Volume = 0
			local any_LoadAnimation_result1_upvr_3 = Humanoid_upvr:LoadAnimation(Parent_upvr.ShootAimAnim)
			any_LoadAnimation_result1_upvr_3.Priority = Enum.AnimationPriority.Action3
			local any_LoadAnimation_result1_upvr_7 = Humanoid_upvr:LoadAnimation(Parent_upvr.AimEnd)
			any_LoadAnimation_result1_upvr_7.Priority = Enum.AnimationPriority.Action2
			local AbsoluteSize = ReloadButton_upvr.Screen.AbsoluteSize
			if math.min(AbsoluteSize.X, AbsoluteSize.Y) > 500 then
				-- KONSTANTWARNING: GOTO [624] #417
			end
			-- KONSTANTERROR: [0] 1. Error Block 43 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [623] 416. Error Block 49 start (CF ANALYSIS FAILED)
			if true then
				local _ = 70
			else
			end
			local var107_upvw = false
			local AmountFrame_upvr = Parent_upvr.AmmoGUI.BillboardGui.AmountFrame
			local InventoryMenu_upvw = LocalPlayer_upvw.PlayerGui.TheInventorySystem.InventoryMenu
			local var110_upvw = 1
			ReplicatedStorage:WaitForChild("FriendJoinedEvent").Event:Connect(function(arg1, arg2) -- Line 233
	--[[ Upvalues[1]:
		[1]: var110_upvw (read and write)
	]]
				var110_upvw = 1 + arg1 / 10
			end)
			ReplicatedStorage:WaitForChild("FriendLeftEvent").Event:Connect(function(arg1) -- Line 238
	--[[ Upvalues[1]:
		[1]: var110_upvw (read and write)
	]]
				var110_upvw = 1 + arg1 / 10
			end)
			while any_LoadAnimation_result1_upvr_6.Length == 0 do
				task.wait()
			end
			RunService.RenderStepped:Connect(function() -- Line 250
	--[[ Upvalues[5]:
		[1]: InventoryMenu_upvw (read and write)
		[2]: CrossHair_upvw (read and write)
		[3]: DefaultMouse_upvw (read and write)
		[4]: var107_upvw (read and write)
		[5]: var57_upvw (read and write)
	]]
				if InventoryMenu_upvw.Visible then
					CrossHair_upvw.ImageTransparency = 1
					DefaultMouse_upvw.ImageTransparency = 0
				else
					if var107_upvw then
						CrossHair_upvw.ImageTransparency = 1
						DefaultMouse_upvw.ImageTransparency = 0
						return
					end
					if var57_upvw then
						CrossHair_upvw.ImageTransparency = 0
						DefaultMouse_upvw.ImageTransparency = 1
					end
				end
			end)
			local function getAllStuff_upvr() -- Line 264, Named "getAllStuff"
	--[[ Upvalues[18]:
		[1]: CurrentCamera_upvw (read and write)
		[2]: SlotSelected_upvw (read and write)
		[3]: PlayerGui_upvr (readonly)
		[4]: AmmoInside_upvr (readonly)
		[5]: Value_upvw (read and write)
		[6]: LocalPlayer_upvw (read and write)
		[7]: Players_upvr (readonly)
		[8]: Character_2_upvw (read and write)
		[9]: InventoryMenu_upvw (read and write)
		[10]: mouse_upvw (read and write)
		[11]: DefaultMouse_upvw (read and write)
		[12]: CrossHair_upvw (read and write)
		[13]: Ammunition_upvw (read and write)
		[14]: Inspect_2_upvw (read and write)
		[15]: Reload_upvw (read and write)
		[16]: Shoot_upvw (read and write)
		[17]: ShootButton_upvw (read and write)
		[18]: Aim_upvw (read and write)
	]]
				CurrentCamera_upvw = workspace.CurrentCamera
				SlotSelected_upvw = PlayerGui_upvr.TheInventorySystem.SlotSelected
				AmmoInside_upvr.Value = Value_upvw
				LocalPlayer_upvw = Players_upvr.LocalPlayer
				local Character = LocalPlayer_upvw.Character
				if not Character then
					Character = LocalPlayer_upvw.CharacterAdded:wait()
				end
				Character_2_upvw = Character
				InventoryMenu_upvw = LocalPlayer_upvw.PlayerGui.TheInventorySystem.InventoryMenu
				mouse_upvw = LocalPlayer_upvw:GetMouse()
				DefaultMouse_upvw = LocalPlayer_upvw.PlayerGui.Mouse.DefaultMouse
				CrossHair_upvw = LocalPlayer_upvw.PlayerGui.Mouse.CrossHair
				Ammunition_upvw = LocalPlayer_upvw:WaitForChild("Ammunition")
				Inspect_2_upvw = LocalPlayer_upvw.PlayerGui.MobileButtons:WaitForChild("Inspect")
				Reload_upvw = LocalPlayer_upvw.PlayerGui.MobileButtons:WaitForChild("Reload")
				Shoot_upvw = LocalPlayer_upvw.PlayerGui.MobileButtons:WaitForChild("Shoot")
				ShootButton_upvw = Shoot_upvw:WaitForChild("ShootButton")
				Aim_upvw = LocalPlayer_upvw.PlayerGui.MobileButtons:WaitForChild("Aim")
			end
			local var115_upvr = 120
			function updateInputReload() -- Line 292
	--[[ Upvalues[4]:
		[1]: UserInputService_upvr (readonly)
		[2]: Reload_upvw (read and write)
		[3]: ReloadButton_upvr (readonly)
		[4]: var115_upvr (readonly)
	]]
				if UserInputService_upvr.TouchEnabled then
					Reload_upvw.Enabled = true
					ReloadButton_upvr.Size = UDim2.new(0, var115_upvr, 0, var115_upvr)
				end
			end
			function updateInputAim() -- Line 299
	--[[ Upvalues[4]:
		[1]: UserInputService_upvr (readonly)
		[2]: Aim_upvw (read and write)
		[3]: AimButton_upvr (readonly)
		[4]: var115_upvr (readonly)
	]]
				if UserInputService_upvr.TouchEnabled then
					Aim_upvw.Enabled = true
					AimButton_upvr.Size = UDim2.new(0, var115_upvr, 0, var115_upvr)
				end
			end
			function updateInputShoot() -- Line 306
	--[[ Upvalues[4]:
		[1]: UserInputService_upvr (readonly)
		[2]: Shoot_upvw (read and write)
		[3]: ShootButton_upvw (read and write)
		[4]: var115_upvr (readonly)
	]]
				if UserInputService_upvr.TouchEnabled then
					Shoot_upvw.Enabled = true
					ShootButton_upvw.Size = UDim2.new(0, var115_upvr, 0, var115_upvr)
				end
			end
			function updateInputInspect() -- Line 313
	--[[ Upvalues[4]:
		[1]: UserInputService_upvr (readonly)
		[2]: Inspect_2_upvw (read and write)
		[3]: InspectButton_upvr (readonly)
		[4]: var115_upvr (readonly)
	]]
				if UserInputService_upvr.TouchEnabled then
					Inspect_2_upvw.Enabled = true
					InspectButton_upvr.Size = UDim2.new(0, var115_upvr, 0, var115_upvr)
				end
			end
			local tbl_upvr = {
				['1'] = {"rbxassetid://16145578637"};
				['2'] = {"rbxassetid://16145750555"};
				['3'] = {"rbxassetid://16145755340"};
				['4'] = {"rbxassetid://16145760504"};
				['5'] = {"rbxassetid://16145764740"};
				['6'] = {"rbxassetid://16145767006"};
				['7'] = {"rbxassetid://16145769160"};
				['8'] = {"rbxassetid://16145771663"};
				['9'] = {"rbxassetid://16145774117"};
				['0'] = {"rbxassetid://16152604358"};
				['/'] = {"rbxassetid://16152801449"};
				_ = {""};
			}
			local function CreateNumber_upvr(arg1) -- Line 335, Named "CreateNumber"
	--[[ Upvalues[2]:
		[1]: AmountFrame_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
				AmountFrame_upvr.FirstDigit.Image = ""
				AmountFrame_upvr.SecondDigit.Image = ""
				AmountFrame_upvr.ThirdDigit.Image = ""
				AmountFrame_upvr.FourthDigit.Image = ""
				AmountFrame_upvr.FifthDigit.Image = ""
				AmountFrame_upvr.SixthDigit.Image = ""
				for i_5 = 1, arg1:len() do
					local var131
					if i_5 == 1 then
						var131 = AmountFrame_upvr.FirstDigit
					elseif i_5 == 2 then
						var131 = AmountFrame_upvr.SecondDigit
					elseif i_5 == 3 then
						var131 = AmountFrame_upvr.ThirdDigit
					elseif i_5 == 4 then
						var131 = AmountFrame_upvr.FourthDigit
					elseif i_5 == 5 then
						var131 = AmountFrame_upvr.FifthDigit
					elseif i_5 == 6 then
						var131 = AmountFrame_upvr.SixthDigit
					end
					var131.Image = tbl_upvr[arg1:sub(i_5, i_5)][1]
				end
			end
			AmmoInside_upvr:GetPropertyChangedSignal("Value"):Connect(function()
					Value_upvw = AmmoInside.upvr.Value
				CreateNumber_upvr(tostring(Value_upvw..'/'..tonumber_result1_upvr_2))
			end)
			local function Inspect_upvr()
				CreateNumber_upvr(tostring(Value_upvw..'/'..tonumber_result1_upvr_2))
				if var57_upvw then
					any_LoadAnimation_result1_upvr_2:Play()
					InspectSound_upvr:Play()
					InspectSoundLocal_upvr:Play()
					var55_upvw = true
					--any_new_result1_upvr:Start()
					AmountFrame_upvr.Visible = true
					wait(any_LoadAnimation_result1_upvr_2.Length)
					if var57_upvw and not var107_upvw and not var54_upvw then
						var55_upvw = false
						AmountFrame_upvr.Visible = false
					end
				end
			end
			local function _() -- Line 386, Named "endinspect"
	--[[ Upvalues[5]:
		[1]: any_LoadAnimation_result1_upvr_2 (readonly)
		[2]: InspectSound_upvr (readonly)
		[3]: InspectSoundLocal_upvr (readonly)
		[4]: var55_upvw (read and write)
		[5]: AmountFrame_upvr (readonly)
	]]
				any_LoadAnimation_result1_upvr_2:Stop()
				InspectSound_upvr:Stop()
				InspectSoundLocal_upvr:Stop()
				var55_upvw = false
				AmountFrame_upvr.Visible = false
			end
			local Equipped_upvr = Remotes_upvr:WaitForChild("Equipped")
			Parent_upvr.Equipped:Connect(function() -- Line 394
	--[[ Upvalues[14]:
		[1]: getAllStuff_upvr (readonly)
		[2]: any_LoadAnimation_result1_upvr_9 (readonly)
		[3]: any_LoadAnimation_result1_upvr_8 (readonly)
		[4]: EquipSound_upvr (readonly)
		[5]: EquipSoundlocal_upvr (readonly)
		[6]: var92_upvw (read and write)
		[7]: Equipped_upvr (readonly)
		[8]: Parent_upvr (readonly)
		[9]: Character_2_upvw (read and write)
		[10]: UserInputService_upvr (readonly)
		[11]: PlayerGui_upvr (readonly)
		[12]: CrossHair_upvw (read and write)
		[13]: DefaultMouse_upvw (read and write)
		[14]: var57_upvw (read and write)
	]]
				getAllStuff_upvr()
				any_LoadAnimation_result1_upvr_9:play()
				any_LoadAnimation_result1_upvr_8:Play()
				EquipSound_upvr.Volume = 0
				EquipSoundlocal_upvr:Play()
				var92_upvw = false
				updateInputReload()
				updateInputAim()
				updateInputInspect()
				updateInputShoot()
				Equipped_upvr:FireServer(Parent_upvr, newParent:GetAttribute("equip_length_none"), Character_2_upvw)
				if UserInputService_upvr.TouchEnabled == false then
					PlayerGui_upvr.TheInventorySystem.KeyboardControlsList.ItemControls.Image = "rbxassetid://16629769669"
				end
				CrossHair_upvw.ImageTransparency = 0
				DefaultMouse_upvw.ImageTransparency = 1
				wait(any_LoadAnimation_result1_upvr_9.Length)
				if not var92_upvw then
					var57_upvw = true
				end
			end)
			Parent_upvr.Unequipped:Connect(function()
				any_LoadAnimation_result1_upvr_6:Stop()
				any_LoadAnimation_result1_upvr_10:Stop()
				any_LoadAnimation_result1_upvr_5:Stop()
				any_LoadAnimation_result1_upvr:Stop()
				any_LoadAnimation_result1_upvr_4:Stop()
				any_LoadAnimation_result1_upvr_3:Stop()
				any_LoadAnimation_result1_upvr_9:Stop()
				var57_upvw = false
				var92_upvw = true
				EquipSoundlocal_upvr:Stop()
				Reload_upvw.Enabled = false
				Aim_upvw.Enabled = false
				PlayerGui_upvr.TheInventorySystem.KeyboardControlsList.ItemControls.Image = "rbxassetid://110730554989882"
				Inspect_2_upvw.Enabled = false
				Shoot_upvw.Enabled = false
				any_LoadAnimation_result1_upvr_8:Stop()
				ReloadSound_upvr:Stop()
				ReloadSoundLocal_upvr:Stop()
				CrossHair_upvw.ImageTransparency = 1
				DefaultMouse_upvw.ImageTransparency = 0
				var107_upvw = false
				UserInputService_upvr.MouseDeltaSensitivity = 0.3
				any_LoadAnimation_result1_upvr_2:Stop()
				InspectSound_upvr:Stop()
				InspectSoundLocal_upvr:Stop()
				var55_upvw = false
				AmountFrame_upvr.Visible = false
			end)
			local function _() -- Line 446, Named "IsNearCenter"
	--[[ Upvalues[2]:
		[1]: UserInputService_upvr (readonly)
		[2]: mouse_upvw (read and write)
	]]
				if UserInputService_upvr.TouchEnabled then
					return true
				end
				local ViewportSize = workspace.CurrentCamera.ViewportSize
				local var137 = Vector2.new(mouse_upvw.X, mouse_upvw.Y) - Vector2.new(ViewportSize.X / 2, ViewportSize.Y / 2)
				if var137.Magnitude > 100 then
					var137 = false
				else
					var137 = true
				end
				return var137
			end
			local AimBeginSoundLocal_upvr = Parent_upvr:WaitForChild("AimBeginSoundLocal")
			local function BeginAim_upvr() -- Line 458, Named "BeginAim"
	--[[ Upvalues[16]:
		[1]: Humanoid_upvr (readonly)
		[2]: AimBeginSoundLocal_upvr (readonly)
		[3]: any_LoadAnimation_result1_upvr_8 (readonly)
		[4]: any_LoadAnimation_result1_upvr_4 (readonly)
		[5]: any_LoadAnimation_result1_upvr_7 (readonly)
		[6]: any_LoadAnimation_result1_upvr_5 (readonly)
		[7]: any_LoadAnimation_result1_upvr (readonly)
		[8]: any_LoadAnimation_result1_upvr_2 (readonly)
		[9]: InspectSound_upvr (readonly)
		[10]: InspectSoundLocal_upvr (readonly)
		[11]: var55_upvw (read and write)
		[12]: AmountFrame_upvr (readonly)
		[13]: var107_upvw (read and write)
		[14]: CrossHair_upvw (read and write)
		[15]: DefaultMouse_upvw (read and write)
		[16]: UserInputService_upvr (readonly)
	]]
				--Humanoid_upvr.WalkSpeed = 6
				AimBeginSoundLocal_upvr:Play()
				any_LoadAnimation_result1_upvr_8:Stop()
				any_LoadAnimation_result1_upvr_4:Stop()
				any_LoadAnimation_result1_upvr_7:Stop()
				any_LoadAnimation_result1_upvr_5:Play()
				any_LoadAnimation_result1_upvr:Play()
				any_LoadAnimation_result1_upvr_2:Stop()
				InspectSound_upvr:Stop()
				InspectSoundLocal_upvr:Stop()
				var55_upvw = false
				AmountFrame_upvr.Visible = false
				var107_upvw = true
				CrossHair_upvw.ImageTransparency = 1
				DefaultMouse_upvw.ImageTransparency = 0
				UserInputService_upvr.MouseDeltaSensitivity = 0.2
				while var107_upvw do
					if 4 < Humanoid_upvr.WalkSpeed then
						--Humanoid_upvr.WalkSpeed = 6
					end
					wait()
				end
			end
			local AimEndSoundLocal_upvr = Parent_upvr:WaitForChild("AimEndSoundLocal")
			local function EndAim_upvr() -- Line 480, Named "EndAim"
	--[[ Upvalues[11]:
		[1]: any_LoadAnimation_result1_upvr_8 (readonly)
		[2]: any_LoadAnimation_result1_upvr_5 (readonly)
		[3]: AimEndSoundLocal_upvr (readonly)
		[4]: any_LoadAnimation_result1_upvr_4 (readonly)
		[5]: any_LoadAnimation_result1_upvr (readonly)
		[6]: var107_upvw (read and write)
		[7]: any_LoadAnimation_result1_upvr_7 (readonly)
		[8]: CrossHair_upvw (read and write)
		[9]: DefaultMouse_upvw (read and write)
		[10]: Humanoid_upvr (readonly)
		[11]: UserInputService_upvr (readonly)
	]]
				any_LoadAnimation_result1_upvr_8:Play()
				any_LoadAnimation_result1_upvr_5:Stop()
				AimEndSoundLocal_upvr:Play()
				any_LoadAnimation_result1_upvr_4:Stop()
				any_LoadAnimation_result1_upvr:Stop()
				var107_upvw = false
				any_LoadAnimation_result1_upvr_7:Play()
				CrossHair_upvw.ImageTransparency = 0
				DefaultMouse_upvw.ImageTransparency = 1
				--Humanoid_upvr.WalkSpeed = 8
				UserInputService_upvr.MouseDeltaSensitivity = 0.3
			end
			local Reload_upvr = Remotes_upvr:WaitForChild("Reload")
			local tonumber_result1_upvr = tonumber(any_LoadAnimation_result1_upvr_6.Length)
			local function reload_upvr() -- Line 501, Named "reload"
	--[[ Upvalues[21]:
		[1]: tonumber_result1_upvr_2 (readonly)
		[2]: Value_upvw (read and write)
		[3]: FiveFiveSix_upvr (readonly)
		[4]: EndAim_upvr (readonly)
		[5]: any_LoadAnimation_result1_upvr_2 (readonly)
		[6]: InspectSound_upvr (readonly)
		[7]: InspectSoundLocal_upvr (readonly)
		[8]: var55_upvw (read and write)
		[9]: AmountFrame_upvr (readonly)
		[10]: any_LoadAnimation_result1_upvr (readonly)
		[11]: any_LoadAnimation_result1_upvr_6 (readonly)
		[12]: ReloadSound_upvr (readonly)
		[13]: ReloadSoundLocal_upvr (readonly)
		[14]: Reload_upvr (readonly)
		[15]: Parent_upvr (readonly)
		[16]: tonumber_result1_upvr (readonly)
		[17]: var54_upvw (read and write)
		[18]: AmmoInside_upvr (readonly)
		[19]: ChangeAmmoInside_upvr (readonly)
		[20]: var107_upvw (read and write)
		[21]: BeginAim_upvr (readonly)
	]]
				local minimum_2 = math.min(tonumber_result1_upvr_2 - Value_upvw, FiveFiveSix_upvr.Value)
				if 0 < minimum_2 then
					EndAim_upvr()
					any_LoadAnimation_result1_upvr_2:Stop()
					InspectSound_upvr:Stop()
					InspectSoundLocal_upvr:Stop()
					var55_upvw = false
					AmountFrame_upvr.Visible = false
					any_LoadAnimation_result1_upvr:Stop()
					any_LoadAnimation_result1_upvr_6:play()
					ReloadSound_upvr.Volume = 0
					ReloadSoundLocal_upvr:Play()
					Reload_upvr:FireServer(Parent_upvr, 2.3, Value_upvw, minimum_2, FiveFiveSix_upvr, tonumber_result1_upvr)
					var54_upvw = true
					wait(any_LoadAnimation_result1_upvr_6.Length)
					Value_upvw += minimum_2
					AmmoInside_upvr.Value = Value_upvw
					ChangeAmmoInside_upvr:FireServer(Value_upvw)
					var54_upvw = false
					if var107_upvw then
						BeginAim_upvr()
					end
				end
			end
			local ReloadSound_upvr = Parent_upvr.Main.ReloadSound
			local ReloadSoundLocal_upvr = Parent_upvr.ReloadSoundLocal
			local function Reload_upvr() -- Line 525, Named "Reload"
	--[[ Upvalues[21]:
		[1]: tonumber_result1_upvr_2 (readonly)
		[2]: FiveFiveSix_upvr (readonly)
		[3]: EndAim_upvr (readonly)
		[4]: any_LoadAnimation_result1_upvr_2 (readonly)
		[5]: InspectSound_upvr (readonly)
		[6]: InspectSoundLocal_upvr (readonly)
		[7]: var55_upvw (read and write)
		[8]: AmountFrame_upvr (readonly)
		[9]: any_LoadAnimation_result1_upvr (readonly)
		[10]: any_LoadAnimation_result1_upvr_10 (readonly)
		[11]: ReloadSound_upvr (readonly)
		[12]: ReloadSoundLocal_upvr (readonly)
		[13]: Remotes_upvr (readonly)
		[14]: Parent_upvr (readonly)
		[15]: Value_upvw (read and write)
		[16]: var54_upvw (read and write)
		[17]: any_LoadAnimation_result1_upvr_6 (readonly)
		[18]: AmmoInside_upvr (readonly)
		[19]: ChangeAmmoInside_upvr (readonly)
		[20]: var107_upvw (read and write)
		[21]: BeginAim_upvr (readonly)
	]]
				local minimum = math.min(tonumber_result1_upvr_2 - 1, FiveFiveSix_upvr.Value)
				if 0 < minimum then
					EndAim_upvr()
					any_LoadAnimation_result1_upvr_2:Stop()
					InspectSound_upvr:Stop()
					InspectSoundLocal_upvr:Stop()
					var55_upvw = false
					AmountFrame_upvr.Visible = false
					any_LoadAnimation_result1_upvr:Stop()
					any_LoadAnimation_result1_upvr_10:play()
					ReloadSound_upvr.Volume = 0
					ReloadSoundLocal_upvr:Play()
					Remotes_upvr.Reload:FireServer(Parent_upvr, any_LoadAnimation_result1_upvr_10.Length, Value_upvw, minimum, FiveFiveSix_upvr, any_LoadAnimation_result1_upvr_10.Length)
					var54_upvw = true
					wait(any_LoadAnimation_result1_upvr_6.Length)
					Value_upvw += minimum
					AmmoInside_upvr.Value = Value_upvw
					ChangeAmmoInside_upvr:FireServer(Value_upvw)
					var54_upvw = false
					if var107_upvw then
						BeginAim_upvr()
					end
				end
			end
			local shotsound_upvr = Parent_upvr:WaitForChild("shotsound")
			local MaxRange_upvr = Parent_upvr:GetAttribute("MaxRange")
			local GunRemote_upvr = Remotes_upvr:WaitForChild("GunRemote")
			local Cylinder_001_upvr = ReplicatedStorage:WaitForChild("FiveFiveSix"):WaitForChild("Cylinder.001")
			local EjectionPart_upvr = Parent_upvr:WaitForChild("EjectionPart")
			local EjectionPartProjectile_upvr = Parent_upvr:WaitForChild("EjectionPartProjectile")
			local ShellDestroyTime_upvr = 0--Parent_upvr:GetAttribute("ShellDestroyTime")

			-- ====== CONFIG ======
			local bulletsPerFrame = 25
			-- ======================
			
			local function ensureVector3(v, fallback)
			    if typeof(v) == "Vector3" then return v end
			    return fallback or Vector3.new(0, 0, -1)
			end
			
			local function gaussian2D(sigma)
			    local u1, u2 = math.random(), math.random()
			    local mag = math.sqrt(-2 * math.log(math.max(u1, 1e-12)))
			    local z0 = mag * math.cos(2 * math.pi * u2)
			    local z1 = mag * math.sin(2 * math.pi * u2)
			    return z0 * sigma, z1 * sigma
			end
			
			local function getEditedLookVector(lookVector, angle, offset)
			    lookVector = ensureVector3(lookVector, Vector3.new(0, 0, -1))
			    angle = angle or 0
			    local rad = math.rad(angle)
			
			    local up = Vector3.new(0, 1, 0)
			    if math.abs(lookVector:Dot(up)) > 0.99 then
			        up = Vector3.new(1, 0, 0)
			    end
			
			    local rightRaw = lookVector:Cross(up)
			    if rightRaw.Magnitude < 1e-6 then
			        rightRaw = Vector3.new(1, 0, 0)
			    end
			    local right = rightRaw.Unit
			    local perpRaw = right:Cross(lookVector)
			    if perpRaw.Magnitude < 1e-6 then
			        perpRaw = Vector3.new(0, 1, 0)
			    end
			    local perp = perpRaw.Unit
			
			    local rotatedRight = right * math.cos(rad) + perp * math.sin(rad)
			    local rotatedPerp  = -right * math.sin(rad) + perp * math.cos(rad)
			
			    offset = offset or {0, 0}
			    local offsetVec = rotatedRight * offset[1] + rotatedPerp * offset[2]
			
			    local final = (lookVector + offsetVec)
			    if final.Magnitude < 1e-6 then
			        final = lookVector
			    end
			    return final.Unit
			end
			
			local function simpleRaycast(originCFrame, blacklist, direction, range)
			    if typeof(direction) ~= "Vector3" then
			        return originCFrame.Position + Vector3.new(0, 0, -1) * (range or 100), nil
			    end
			    local dirUnit = direction.Unit
			    local raycastParams = RaycastParams.new()
			    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
			    raycastParams.FilterDescendantsInstances = blacklist or {}
			
			    local origin = originCFrame.Position + dirUnit * 1 -- start slightly in front of camera
			    local rayDirection = dirUnit * (range or MaxRange_upvr or 500)
			    local result = workspace:Raycast(origin, rayDirection, raycastParams)
			    if result then
			        return result.Position, result.Instance
			    else
			        return origin + rayDirection, nil
			    end
			end
			
			local function bullett(direction, originCFrame)
			    if typeof(direction) ~= "Vector3" then
			        warn("bullett called with bad direction:", direction)
			        return
			    end
			    local somepos, newtarget = simpleRaycast(originCFrame, var84_upvr, direction, MaxRange_upvr)
			    somepos = somepos or (originCFrame.Position + direction.Unit * (MaxRange_upvr or 500))
			    pcall(function()
			        GunRemote_upvr:FireServer(Parent_upvr, originCFrame.Position:Lerp(somepos, 0.9), direction * (MaxRange_upvr or 500), var57_upvw, var84_upvr, var110_upvw)
			    end)
			    if var107_upvw then
			        pcall(function() any_LoadAnimation_result1_upvr_3:Play() end)
			    else
			        pcall(function() any_LoadAnimation_result1_upvr_4:Play() end)
			    end
			end
			
			local function fireBulletsInBatches(bulletDirs, originCFrame)
			    for i = 1, #bulletDirs, bulletsPerFrame do
			        local limit = math.min(i + bulletsPerFrame - 1, #bulletDirs)
			        for j = i, limit do
			            bullett(bulletDirs[j], originCFrame)
			        end
			        task.wait() -- yield one frame between batches
			    end
			end
			
			local modes = {
			    normal = {
			        index = 1,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
			            local dirs = {}
			            for i = 1, math.max(1, bulletcount or 1) do
			                local xOff, yOff = gaussian2D(spreadAngle)
			                dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {xOff, yOff})
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },
			
			    circle = {
			        index = 2,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
			            local bulletsPerCircle = math.max(4, bulletcount or 36)
			            local dirs = {}
			            for i = 0, bulletsPerCircle - 1 do
			                local a = (i / bulletsPerCircle) * (2 * math.pi)
			                local x = math.cos(a) * spreadAngle
			                local y = math.sin(a) * spreadAngle
			                dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {x, y})
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },

				triangle = {
			        index = 6,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
						angleoffset+=180
			            local bulletsPerSide = math.max(2, math.floor((bulletcount or 12) / 3))
			            local verts, r = {}, spreadAngle
			            for i = 0, 2 do
			                local a = (i / 3) * 2 * math.pi - math.pi/2
			                verts[#verts+1] = {r * math.cos(a), r * math.sin(a)}
			            end
			            local dirs = {}
			            for i = 1, 3 do
			                local x1, y1 = verts[i][1], verts[i][2]
			                local x2, y2 = verts[i % 3 + 1][1], verts[i % 3 + 1][2]
			                for s = 0, bulletsPerSide - 1 do
			                    local t = (bulletsPerSide <= 1) and 0 or s / (bulletsPerSide - 1)
			                    local x = x1 + (x2 - x1) * t
			                    local y = y1 + (y2 - y1) * t
			                    dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {x, y})
			                end
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },
				
			    square = {
			        index = 3,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
			            local bulletsPerSide = math.max(2, bulletcount/4 or 8)
			            local verts = {}
			            local r = spreadAngle
			            for i = 0, 3 do
			                local a = math.pi/4 + (i / 4) * 2 * math.pi
			                verts[#verts+1] = {r * math.cos(a), r * math.sin(a)}
			            end
			            local dirs = {}
			            for i = 1, 4 do
			                local x1, y1 = verts[i][1], verts[i][2]
			                local x2, y2 = verts[i % 4 + 1][1], verts[i % 4 + 1][2]
			                for s = 0, bulletsPerSide - 1 do
			                    local t = (bulletsPerSide <= 1) and 0 or s / (bulletsPerSide - 1)
			                    local x = x1 + (x2 - x1) * t
			                    local y = y1 + (y2 - y1) * t
			                    dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {x, y})
			                end
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },
			
			    pentagon = {
			        index = 4,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
						angleoffset+=90
			            local bulletsPerSide = math.max(2, bulletcount/5 or 8)
			            local verts, r = {}, spreadAngle
			            for i = 0, 4 do
			                local a = (i / 5) * 2 * math.pi
			                verts[#verts+1] = {r * math.cos(a), r * math.sin(a)}
			            end
			            local dirs = {}
			            for i = 1, 5 do
			                local x1, y1 = verts[i][1], verts[i][2]
			                local x2, y2 = verts[i % 5 + 1][1], verts[i % 5 + 1][2]
			                for s = 0, bulletsPerSide - 1 do
			                    local t = (bulletsPerSide <= 1) and 0 or s / (bulletsPerSide - 1)
			                    local x = x1 + (x2 - x1) * t
			                    local y = y1 + (y2 - y1) * t
			                    dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {x, y})
			                end
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },
			
			    hexagon = {
			        index = 5,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
			            local bulletsPerSide = math.max(2, bulletcount/6 or 6)
			            local verts, r = {}, spreadAngle
			            for i = 0, 5 do
			                local a = (i / 6) * 2 * math.pi
			                verts[#verts+1] = {r * math.cos(a), r * math.sin(a)}
			            end
			            local dirs = {}
			            for i = 1, 6 do
			                local x1, y1 = verts[i][1], verts[i][2]
			                local x2, y2 = verts[i % 6 + 1][1], verts[i % 6 + 1][2]
			                for s = 0, bulletsPerSide - 1 do
			                    local t = (bulletsPerSide <= 1) and 0 or s / (bulletsPerSide - 1)
			                    local x = x1 + (x2 - x1) * t
			                    local y = y1 + (y2 - y1) * t
			                    dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {x, y})
			                end
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },
			
			    heart = {
			        index = 10,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
						angleoffset+=180
			            local samples = math.max(12, bulletcount or 140)
			            local dirs = {}
			            for i = 0, samples - 1 do
			                local t = (i / samples) * 2 * math.pi
			                local x = 16 * (math.sin(t) ^ 3)
			                local y = 13 * math.cos(t) - 5 * math.cos(2 * t) - 2 * math.cos(3 * t) - math.cos(4 * t)
			                x = x * (spreadAngle / 17)
			                y = -y * (spreadAngle / 17)
			                dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {x, y})
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },
			
			    star = {
			        index = 11,
			        fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
						angleoffset+=180
			            local bulletsPerEdge = math.max(2, math.floor((bulletcount or 25) / 5))
			            local r = spreadAngle
			            local verts = {}
			            for i = 0, 4 do
			                local a = (i / 5) * 2 * math.pi - math.pi/2
			                verts[#verts+1] = {r * math.cos(a), r * math.sin(a)}
			            end
			            local order = {1, 3, 5, 2, 4}
			            local dirs = {}
			            for i = 1, #order do
			                local x1, y1 = verts[order[i]][1], verts[order[i]][2]
			                local x2, y2 = verts[order[(i % #order) + 1]][1], verts[order[(i % #order) + 1]][2]
			                for s = 0, bulletsPerEdge - 1 do
			                    local t = (bulletsPerEdge <= 1) and 0 or s / (bulletsPerEdge - 1)
			                    local x = x1 + (x2 - x1) * t
			                    local y = y1 + (y2 - y1) * t
			                    dirs[#dirs + 1] = getEditedLookVector(originalLook, angleoffset, {x, y})
			                end
			            end
			            fireBulletsInBatches(dirs, originCFrame)
			        end
			    },

				text = {
				    index = 99,
				    fire = function(originalLook, spreadAngle, originCFrame, bulletcount, angleoffset)
				        local str = "HELLO 123!"
				        str = string.upper(str)
				        local newSpread = spreadAngle / 2
				        local count = #str
				        if count == 0 then return end
				
				        local bulletsPerSymbol = math.max(1, math.floor((bulletcount or 20) / count))
				
				        local function lineGlyph(x1, y1, x2, y2, bcount)
				            local pts = {}
				            for i = 0, bcount - 1 do
				                local t = (bcount <= 1) and 0 or i / (bcount - 1)
				                local x = x1 + (x2 - x1) * t
				                local y = y1 + (y2 - y1) * t
				                pts[#pts + 1] = {x, y}
				            end
				            return pts
				        end
				
				        local symbols = {}
				
				        -- Letters A-Z
				        symbols["A"] = function(orig, spread, cframe, bcount, angleoff, offset)
				            local lines = {
				                {-spread, -spread, 0, spread},
				                {0, spread, spread, -spread},
				                {-spread/2, 0, spread/2, 0}
				            }
				            local dirs = {}
				            for _, l in ipairs(lines) do
				                local pts = lineGlyph(l[1], l[2], l[3], l[4], math.max(1, math.floor(bcount/#lines)))
				                for _, p in ipairs(pts) do dirs[#dirs+1] = getEditedLookVector(orig, angleoff, {p[1]+offset, p[2]}) end
				            end
				            fireBulletsInBatches(dirs, cframe)
				        end
				
				        symbols["B"] = function(orig, spread, cframe, bcount, angleoff, offset)
				            local lines = {
				                {-spread, -spread, -spread, spread},
				                {-spread, spread, spread/2, 3*spread/4},
				                {-spread, 0, spread/2, -spread/4}
				            }
				            local dirs = {}
				            for _, l in ipairs(lines) do
				                local pts = lineGlyph(l[1], l[2], l[3], l[4], math.max(1, math.floor(bcount/#lines)))
				                for _, p in ipairs(pts) do dirs[#dirs+1] = getEditedLookVector(orig, angleoff, {p[1]+offset, p[2]}) end
				            end
				            fireBulletsInBatches(dirs, cframe)
				        end
				
				        symbols["C"] = function(orig, spread, cframe, bcount, angleoff, offset)
				            local dirs = {}
				            local segments = 5
				            for i = 0, segments do
				                local a = math.rad(180*i/segments + 90)
				                local x = math.cos(a) * spread + offset
				                local y = math.sin(a) * spread
				                dirs[#dirs+1] = getEditedLookVector(orig, angleoff, {x, y})
				            end
				            fireBulletsInBatches(dirs, cframe)
				        end
				
				        symbols["D"] = function(orig, spread, cframe, bcount, angleoff, offset)
				            local dirs = {}
				            local segments = 5
				            for i = 0, segments do
				                local a = math.rad(180*i/segments - 90)
				                local x = math.cos(a) * spread + offset
				                local y = math.sin(a) * spread
				                dirs[#dirs+1] = getEditedLookVector(orig, angleoff, {x, y})
				            end
				            for i = -spread, spread, spread/segments do
				                dirs[#dirs+1] = getEditedLookVector(orig, angleoff, {-spread + offset, i})
				            end
				            fireBulletsInBatches(dirs, cframe)
				        end
				
				        symbols["E"] = function(orig, spread, cframe, bcount, angleoff, offset)
				            local lines = {
				                {-spread, -spread, -spread, spread},
				                {-spread, spread, spread, spread},
				                {-spread, 0, spread*0.7, 0},
				                {-spread, -spread, spread, -spread}
				            }
				            local dirs = {}
				            for _, l in ipairs(lines) do
				                local pts = lineGlyph(l[1], l[2], l[3], l[4], math.max(1, math.floor(bcount/#lines)))
				                for _, p in ipairs(pts) do dirs[#dirs+1] = getEditedLookVector(orig, angleoff, {p[1]+offset, p[2]}) end
				            end
				            fireBulletsInBatches(dirs, cframe)
				        end
				
				        symbols["F"] = function(orig, spread, cframe, bcount, angleoff, offset)
				            local lines = {
				                {-spread, -spread, -spread, spread},
				                {-spread, 0, spread, 0},
				                {-spread, spread, spread*0.7, spread}
				            }
				            local dirs = {}
				            for _, l in ipairs(lines) do
				                local pts = lineGlyph(l[1], l[2], l[3], l[4], math.max(1, math.floor(bcount/#lines)))
				                for _, p in ipairs(pts) do dirs[#dirs+1] = getEditedLookVector(orig, angleoff, {p[1]+offset, p[2]}) end
				            end
				            fireBulletsInBatches(dirs, cframe)
				        end
				
				        -- G-Z simplified: you can refine coordinates similarly
				        for _, ch in ipairs({
				            "G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
				        }) do
				            symbols[ch] = symbols["A"] -- placeholder pattern; you can replace with proper line coordinates
				        end
				
				        -- Numbers 0-9
				        for n = 0,9 do
				            symbols[tostring(n)] = symbols["C"] -- circle-like glyph
				        end
				
				        -- Punctuation
				        symbols["!"] = symbols["F"] -- vertical line with optional dot
				        symbols["?"] = symbols["B"] -- simple curved + vertical line
				
				        symbols[" "] = function() end -- spaces do nothing
				
				        -- Fire each character
				        local step = newSpread * 3
				        for i = 1, count do
				            local char = str:sub(i,i)
				            local symbolFunc = symbols[char] or symbols["A"]
				            local offset = (i - (count + 1) / 2) * step
				            symbolFunc(originalLook, newSpread, originCFrame, bulletsPerSymbol, angleoffset, offset)
				        end
				    end
				},
			}
			
			local function cycleMode(offset)
			    offset = offset or 1
			    if not newParent then return end
			    local currentModeName = newParent:GetAttribute("mode_none") or "normal"
			    local currentIndex = (modes[currentModeName] and modes[currentModeName].index) or 0
			
			    local indices, nameByIndex = {}, {}
			    for name, data in pairs(modes) do
			        indices[#indices + 1] = data.index
			        nameByIndex[data.index] = name
			    end
			    table.sort(indices)
			
			    local pos = 1
			    for i, idx in ipairs(indices) do
			        if idx == currentIndex then pos = i break end
			    end
			
			    local nextPos = ((pos - 1 + offset) % #indices) + 1
			    local nextModeName = nameByIndex[indices[nextPos]]
			    if nextModeName then
			        newParent:SetAttribute("mode_none", nextModeName)
			        print("Switched mode to:", nextModeName)
			    end
			end
			
			do
			    local UserInputService = game:GetService("UserInputService")
			    UserInputService.InputBegan:Connect(function(input, gameProcessed)
			        if gameProcessed then return end
			        if input.KeyCode == Enum.KeyCode.B and (UserInputService:IsKeyDown(Enum.KeyCode.LeftAlt) or UserInputService:IsKeyDown(Enum.KeyCode.RightAlt)) then
			            local dir = 1
			            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift) then
			                dir = -1
			            end
			            cycleMode(dir)
			        end
			    end)
			end
			
			local function FireGun_upvr()
			    if var57_upvw and Parent_upvr.Enabled and not var45_upvw and 0 < Value_upvw then
			        if not var54_upvw then
			            CurrentCamera_upvw = workspace.CurrentCamera or workspace:FindFirstChildOfClass("Camera")
			            var45_upvw = true
			
			            -- sounds + UI
			            shotsound_upvr.PlaybackSpeed = math.random(90, 110) / 100
			            pcall(function() shotsound_upvr:Play() end)
			            Value_upvw -= 1
			            AmmoInside_upvr.Value = Value_upvw
			            pcall(function() ChangeAmmoInside_upvr:FireServer(Value_upvw) end)
			            pcall(function() any_LoadAnimation_result1_upvr_2:Stop() end)
			            pcall(function() InspectSound_upvr:Stop() end)
			            pcall(function() InspectSoundLocal_upvr:Stop() end)
			            var55_upvw = false
			            AmountFrame_upvr.Visible = false
			
			            local newwcf = CurrentCamera_upvw and CurrentCamera_upvw.CFrame or CFrame.new()
			            local spreadAngle = newParent:GetAttribute("spread_none") or 0
			            local bulletcount = newParent:GetAttribute("bullets_none") or 1
			            local angleoffset = newParent:GetAttribute("angle_none") or 0
			            local originalLook = (newwcf and newwcf.LookVector) or Vector3.new(0, 0, -1)
			            local mode = newParent:GetAttribute("mode_none") or "normal"
			
			            local modeData = modes[mode] or modes.normal
			            modeData.fire(originalLook, spreadAngle, newwcf, bulletcount, angleoffset)
			
			            task.wait()
			            local clone = Cylinder_001_upvr:Clone()
			            clone.Parent = EjectionPart_upvr
			            clone.CFrame = CFrame.new(EjectionPart_upvr.Position)
			            clone.CFrame *= CFrame.Angles(math.pi/2, 0.7853981633974483, math.pi)
			            clone.Velocity = (EjectionPartProjectile_upvr.Position - clone.Position).Unit * 30
			            local tbl_upvr_2 = {clone:WaitForChild("shotgunshell1"), clone:WaitForChild("shotgunshell2"), clone:WaitForChild("shotgunshell3")}
			            local cd = Parent_upvr:GetAttribute("cooldown_none")
			            if cd ~= -1 then
			                cd = math.max(cd, 0)
			            else
			                cd = Parent_upvr:GetAttribute("cooldown")
			            end
			            if cd > 0 then task.wait(cd) end
			            var45_upvw = false
			            local var159_upvw = false
			            clone.Touched:Connect(function(arg1)
			                if not var159_upvw then
			                    tbl_upvr_2[math.random(1,3)]:Play()
			                    var159_upvw = true
			                end
			            end)
			            task.wait(ShellDestroyTime_upvr)
			            clone:Destroy()
			        end
			    end
			end
			local var160_upvw = false
			UserInputService_upvr.InputBegan:Connect(function(arg1, arg2)
				if arg1.UserInputType == Enum.UserInputType.MouseButton1 or arg1.KeyCode == Enum.KeyCode.ButtonR2 then
					if newParent.Parent and newParent.Parent:FindFirstChild("Humanoid") then
						if UserInputService_upvr.TouchEnabled then
						else
							local ViewportSize_2 = workspace.CurrentCamera.ViewportSize
							if (Vector2.new(mouse_upvw.X, mouse_upvw.Y) - Vector2.new(ViewportSize_2.X / 2, ViewportSize_2.Y / 2)).Magnitude > 100 then
							else
							end
						end
						if true then
							var160_upvw = true
							if var57_upvw and Value_upvw == 0 and not var54_upvw then
								hammerclick_upvr:Play()
							end
						end
					else
					end
				end
			end)
			ShootButton_upvw.MouseButton1Down:Connect(function()
				var160_upvw = true
				if var57_upvw and Value_upvw == 0 and not var54_upvw then
					hammerclick_upvr:Play()
				end
			end)
			ShootButton_upvw.MouseButton1Up:Connect(function()
				var160_upvw = false
			end)
			UserInputService_upvr.InputEnded:Connect(function(arg1)
				if arg1.UserInputType == Enum.UserInputType.MouseButton1 or arg1.KeyCode == Enum.KeyCode.ButtonR2 then
					var160_upvw = false
				end
			end)

			RunService.Heartbeat:Connect(function()
				local ViewportSize = workspace.CurrentCamera.ViewportSize
				local inRange = (Vector2.new(mouse_upvw.X, mouse_upvw.Y) - Vector2.new(ViewportSize.X / 2, ViewportSize.Y / 2)).Magnitude <= 100

				if var160_upvw and inRange and Value_upvw > 0 and not var54_upvw then
					local auto = newParent:GetAttribute("autofire_none")
					--print(auto, "autofire")
					if auto ~= true then
						var160_upvw = false
					end
					FireGun_upvr()
				end
			end)

			UserInputService_upvr.InputBegan:Connect(function(arg1, arg2)
				if arg1.KeyCode == Enum.KeyCode.R or arg1.KeyCode == Enum.KeyCode.ButtonX or not var54_upvw and var57_upvw then
					if Value_upvw < tonumber_result1_upvr_2 and not var107_upvw then
						if 0 < Value_upvw then
							reload_upvr()
							return
						end
						if Value_upvw == 0 then
							Reload_upvr()
						end
					end
				end
			end)
			ReloadButton_upvr.Activated:Connect(function()
				if not var54_upvw and var57_upvw and Value_upvw < tonumber_result1_upvr_2 and not var107_upvw then
					if 0 < Value_upvw then
						reload_upvr()
						return
					end
					if Value_upvw == 0 then
						Reload_upvr()
					end
				end
			end)
			UserInputService_upvr.InputBegan:Connect(function(arg1, arg2)
				if arg1.UserInputType == Enum.UserInputType.MouseButton2 or arg1.KeyCode == Enum.KeyCode.ButtonL2 then
					if var57_upvw and not var54_upvw then
						BeginAim_upvr()
						any_LoadAnimation_result1_upvr_2:Stop()
						InspectSound_upvr:Stop()
						InspectSoundLocal_upvr:Stop()
						var55_upvw = false
						AmountFrame_upvr.Visible = false
						any_LoadAnimation_result1_upvr_2:Stop()
						InspectSound_upvr:Stop()
						InspectSoundLocal_upvr:Stop()
						var55_upvw = false
						AmountFrame_upvr.Visible = false
					end
				end
			end)
			UserInputService_upvr.InputEnded:Connect(function(arg1, arg2) -- Line 692
				if arg1.UserInputType == Enum.UserInputType.MouseButton2 or arg1.KeyCode == Enum.KeyCode.ButtonL2 then
					if var57_upvw and not var54_upvw then
						EndAim_upvr()
						var107_upvw = false
					end
				end
			end)
			AimButton_upvr.MouseButton1Click:Connect(function() -- Line 704
	--[[ Upvalues[4]:
		[1]: var107_upvw (read and write)
		[2]: var57_upvw (read and write)
		[3]: BeginAim_upvr (readonly)
		[4]: EndAim_upvr (readonly)
	]]
				if var107_upvw == false and var57_upvw then
					var107_upvw = true
					BeginAim_upvr()
				elseif var107_upvw == true then
					if var57_upvw then
						var107_upvw = false
						EndAim_upvr()
					end
				end
			end)
			UserInputService_upvr.InputBegan:Connect(function(arg1, arg2) -- Line 715
	--[[ Upvalues[5]:
		[1]: var57_upvw (read and write)
		[2]: var107_upvw (read and write)
		[3]: var54_upvw (read and write)
		[4]: var55_upvw (read and write)
		[5]: Inspect_upvr (readonly)
	]]
				if arg1.KeyCode == Enum.KeyCode.F or arg1.KeyCode == Enum.KeyCode.DPadUp then
					if var57_upvw and not var107_upvw then
						if not var54_upvw then
							if not var55_upvw then
								Inspect_upvr()
							end
						end
					end
				end
			end)
			InspectButton_upvr.Activated:Connect(function() -- Line 723
	--[[ Upvalues[5]:
		[1]: var57_upvw (read and write)
		[2]: var107_upvw (read and write)
		[3]: var54_upvw (read and write)
		[4]: var55_upvw (read and write)
		[5]: Inspect_upvr (readonly)
	]]
				if var57_upvw and not var107_upvw and not var54_upvw and not var55_upvw then
					Inspect_upvr()
				end
			end)
			local var182_upvw = false
			local HotbarLine_upvr = Inv_upvr:WaitForChild("HotbarLine")
			local Hotbar_upvr = TheInventorySystem:WaitForChild("Hotbar")
			local UnEquipRemote_upvr = TheInventorySystem:WaitForChild("UnEquipRemote")
			local ThrowItemEvent_upvr = ReplicatedStorage:WaitForChild("ThrowItemEvent")
			local DestroyItemRemote_upvr = Remotes_upvr.DestroyItemRemote
			local Storage_upvr = TheInventorySystem.InventoryMenu:WaitForChild("HomeCore Section"):WaitForChild("Storage")
			UserInputService_upvr.InputBegan:Connect(function(arg1, arg2) -- Line 733
	--[[ Upvalues[13]:
		[1]: var57_upvw (read and write)
		[2]: var182_upvw (read and write)
		[3]: SlotSelected_upvw (read and write)
		[4]: HotbarLine_upvr (readonly)
		[5]: Hotbar_upvr (readonly)
		[6]: Parent_upvr (readonly)
		[7]: CurrentCamera_upvw (read and write)
		[8]: Character_2_upvw (read and write)
		[9]: UnEquipRemote_upvr (readonly)
		[10]: ThrowItemEvent_upvr (readonly)
		[11]: DestroyItemRemote_upvr (readonly)
		[12]: Inv_upvr (readonly)
		[13]: Storage_upvr (readonly)
	]]
				if arg1.KeyCode == Enum.KeyCode.T and var57_upvw then
					local var224
					if var182_upvw == false and not arg2 then
						var182_upvw = true
						local var225
						var224 = nil
						if SlotSelected_upvw.Value == 1 then
							var225 = HotbarLine_upvr.InvSlot1
						elseif SlotSelected_upvw.Value == 2 then
							var225 = HotbarLine_upvr.InvSlot2
						elseif SlotSelected_upvw.Value == 3 then
							var225 = HotbarLine_upvr.InvSlot3
						elseif SlotSelected_upvw.Value == 4 then
							var225 = HotbarLine_upvr.InvSlot4
						elseif SlotSelected_upvw.Value == 5 then
							var225 = HotbarLine_upvr.InvSlot5
						elseif SlotSelected_upvw.Value == 6 then
							var225 = HotbarLine_upvr.InvSlot6
						elseif SlotSelected_upvw.Value == 7 then
							var225 = HotbarLine_upvr.InvSlot7
						elseif SlotSelected_upvw.Value == 8 then
							var225 = HotbarLine_upvr.InvSlot8
						elseif SlotSelected_upvw.Value == 9 then
							var225 = HotbarLine_upvr.InvSlot9
						elseif SlotSelected_upvw.Value == 10 then
							var225 = HotbarLine_upvr.InvSlot10
						end
						for _, v_5 in ipairs(var225:GetChildren()) do
							if v_5:isA("ImageButton") then
								var224 = v_5
							end
						end
						for _, v_6 in ipairs(Hotbar_upvr:GetChildren()) do
							if tonumber(v_6.Name:match("%d+$")) == SlotSelected_upvw.Value then
								for _, v_7 in ipairs(v_6:GetChildren()) do
									if v_7.Name == Parent_upvr.Name then
										v_7:Destroy()
									end
								end
							end
						end
						CurrentCamera_upvw = workspace.CurrentCamera
						UnEquipRemote_upvr:FireServer()
						ThrowItemEvent_upvr:FireServer(var225, HotbarLine_upvr, Parent_upvr, var224, Character_2_upvw, (CurrentCamera_upvw.CFrame.LookVector * 100 - Character_2_upvw.Torso.Position).Unit * 30)
						task.wait()
						DestroyItemRemote_upvr:FireServer()
						if var224.Parent.Parent.Parent == Inv_upvr then
							Storage_upvr[var224.Parent.Parent.Name][var224.Parent.Name]:FindFirstChild(var224.Name):SetAttribute("DeleteItem", true)
							return
						end
						if var224.Parent.Parent.Parent == Storage_upvr then
							Inv_upvr[var224.Parent.Parent.Name][var224.Parent.Name]:FindFirstChild(var224.Name):SetAttribute("DeleteItem", true)
						end
					end
				end
			end)
			local DestroyBuildSound_upvr = Parent_upvr:WaitForChild("DestroyBuildSound")
			Remotes_upvr:WaitForChild("DestroyBuildSoundRemote").OnClientEvent:Connect(function(arg1) -- Line 791
	--[[ Upvalues[1]:
		[1]: DestroyBuildSound_upvr (readonly)
	]]
				DestroyBuildSound_upvr.SoundId = tostring(arg1)
				DestroyBuildSound_upvr:Play()
			end)
			local DamageHighlight_upvr = ReplicatedStorage:WaitForChild("DamageHighlight")
			Remotes_upvr:WaitForChild("DamgeBuildRemote").OnClientEvent:Connect(function(arg1) -- Line 796
	--[[ Upvalues[1]:
		[1]: DamageHighlight_upvr (readonly)
	]]
				local clone_2 = DamageHighlight_upvr:Clone()
				clone_2.FillTransparency = 0.5
				clone_2.Parent = arg1
				wait(0.05)
				if clone_2 then
					clone_2:Destroy()
				end
			end)
		end
	end
	local function boot()
		init()
	end
	newParent:GetPropertyChangedSignal("Parent"):Connect(function()
		boot()
	end)
	boot()
end
