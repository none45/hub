local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local plr = game:GetService("Players").LocalPlayer

local conf = loadstring(game:HttpGet('https://raw.githubusercontent.com/none45/hub/refs/heads/main/exploit/hub_settings.lua'))()
local Window = Rayfield:CreateWindow(conf[1])
local MainTab = Window:CreateTab("universal", nil) -- Title, Image
conf[2](MainTab)

local gulptab = Window:CreateTab("helpers", nil) -- Title, Image

local wahh = gulptab:CreateButton({
	Name = "init fat hitbox toggle",
	Callback = function()
    local player = game:GetService("Players").LocalPlayer
    local uis = game:GetService("UserInputService")
    local tweenService = game:GetService("TweenService")
    
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    local toggled = false
    local originalSize
    
    uis.InputBegan:Connect(function(input, processed)
    	if processed then return end
    	if input.KeyCode == Enum.KeyCode.H then
    		local char = player.Character
    		if not char then return end
    		local hitbox = char:FindFirstChild("Hitbox")
    		if not hitbox or not hitbox:IsA("BasePart") then return end
    		
    		-- Store original size once
    		if not originalSize then
    			originalSize = hitbox.Size
    		end
    		
    		toggled = not toggled
    		local goal = {}
    		if toggled then
    			goal.Size = Vector3.new(100, 100, 100)
    		else
    			goal.Size = originalSize
    		end
    		
    		local tween = tweenService:Create(hitbox, tweenInfo, goal)
    		tween:Play()
    	end
    end)
	end,
})

local wahh = gulptab:CreateButton({
	Name = "init auto collect candy",
	Callback = function()
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UIS = game:GetService("UserInputService")
    
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    local parent = workspace:WaitForChild("Map"):WaitForChild("Physical"):WaitForChild("Pumpkins")
    local meshid = "http://www.roblox.com/asset/?id=65015216"
    
    local candies = {}
    local collecting = false
    local targetCandy = nil
    
    --// Function to scan for valid candies
    local function updateCandies()
    	candies = {}
    	for _, obj in ipairs(parent:GetChildren()) do
    		if obj:IsA("MeshPart") and obj.MeshId == meshid then
    			table.insert(candies, obj)
    		end
    	end
    end
    
    --// Update list when new child added
    parent.ChildAdded:Connect(function(child)
    	if child:IsA("MeshPart") and child.MeshId == meshid then
    		table.insert(candies, child)
    	end
    end)
    
    --// Remove from list when deleted
    parent.ChildRemoved:Connect(function(child)
    	for i, v in ipairs(candies) do
    		if v == child then
    			table.remove(candies, i)
    			break
    		end
    	end
    end)
    
    --// Helper: get closest candy
    local function getClosestCandy()
    	local root = character:FindFirstChild("HumanoidRootPart")
    	if not root then return nil end
    
    	local closest, dist = nil, math.huge
    	for _, candy in ipairs(candies) do
    		if candy and candy.Parent then
    			local d = (candy.Position - root.Position).Magnitude
    			if d < dist then
    				closest = candy
    				dist = d
    			end
    		end
    	end
    	return closest
    end
    
    --// Movement loop
    local function startCollecting()
    	if collecting then return end
    	collecting = true
    	print("Auto collecting: ON")
    
    	while collecting do
    		-- Always pick the nearest candy
    		targetCandy = getClosestCandy()
    
    		if targetCandy and targetCandy.Parent then
    			local root = character:FindFirstChild("HumanoidRootPart")
    			if not root then break end
    
    			humanoid:MoveTo(targetCandy.Position)
    			local reached = humanoid.MoveToFinished:Wait()
    
    			if not collecting then break end
    
    			-- Check if target still exists
    			if not targetCandy.Parent then
    				targetCandy = nil
    			end
    		else
    			-- No candies found, idle
    			humanoid:Move(Vector3.zero)
    			task.wait(0.5)
    		end
    	end
    end
    
    local function stopCollecting()
    	if not collecting then return end
    	collecting = false
    	humanoid:Move(Vector3.zero)
    	print("Auto collecting: OFF")
    end
    
    --// Toggle with G
    UIS.InputBegan:Connect(function(input, gp)
    	if gp then return end
    	if input.KeyCode == Enum.KeyCode.G then
    		if collecting then
    			stopCollecting()
    		else
    			updateCandies()
    			startCollecting()
    		end
    	end
    end)
	end,
})
