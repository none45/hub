local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

return {
	{
		Name = "none's hub",
		LoadingTitle = "booting up...",
		LoadingSubtitle = "by none45",
		ConfigurationSaving = {
			Enabled = true,
			FolderName = "nones hub", -- Create a custom folder for your hub/game
			FileName = "levels"
		},
		ToggleUIKeybind = "J",
		Discord = {
			Enabled = false,
			Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
			RememberJoins = false -- Set this to false to make them join the discord every time they load it up
		},
		KeySystem = false, -- Set this to true to use our key system
		KeySettings = {
			Title = "Untitled",
			Subtitle = "Key System",
			Note = "No method of obtaining the key is provided",
			FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
			SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
			GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
			Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
		}
	},
	function(MainTab)
		Rayfield:Notify({
			Title = "script executed!!!",
			Content = "thanks for using nones hub",
			Duration = 6.5,
			Image = nil,
			Actions = { -- Notification Buttons
				Ignore = {
					Name = "okay!",
					Callback = function()
						--The user tapped Okay!
					end
				},
			},
		})

		local function CreateMouseFollower(player)
			local playerGui = game:WaitForChild("CoreGui")

			local gui = Instance.new("ScreenGui")
			gui.Name = "MouseFollower"
			gui.IgnoreGuiInset = false
			gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
			gui.DisplayOrder = 999999999 -- max layer above everything
			gui.Parent = playerGui

			local frame = Instance.new("Frame")
			frame.Size = UDim2.fromOffset(3, 3)
			frame.AnchorPoint = Vector2.new(0.5, 0.5)
			frame.BackgroundColor3 = Color3.new(1, 1, 1)
			frame.BorderSizePixel = 0
			frame.ZIndex = 999999999
			frame.Parent = gui

			local uis = game:GetService("UserInputService")
			uis.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					frame.Position = UDim2.fromOffset(input.Position.X, input.Position.Y)
				end
			end)
		end

		CreateMouseFollower(game:GetService("Players").LocalPlayer)

		local MainSection = MainTab:CreateSection("main")

		local Orca = MainTab:CreateButton({
			Name = "orca hub",
			Callback = function()
				loadstring(
					game:HttpGetAsync("https://raw.githubusercontent.com/richie0866/orca/master/public/latest.lua")
				)()
			end,
		})
		
		local Divider = MainTab:CreateDivider()

		local Dex = MainTab:CreateButton({
			Name = "dex explorer",
			Callback = function()
				loadstring(game:HttpGet("https://raw.githubusercontent.com/peyton2465/Dex/master/out.lua"))()
			end,
		})

		local Divider = MainTab:CreateDivider()

		local saveinstance = MainTab:CreateButton({
			Name = "saveinstance",
			Callback = function()
				local Params = {
					RepoURL = "https://raw.githubusercontent.com/luau/SynSaveInstance/main/",
					SSI = "saveinstance",
				}
				local synsaveinstance = loadstring(game:HttpGet(Params.RepoURL .. Params.SSI .. ".luau", true), Params.SSI)()
				local Options = {} -- Documentation here https://luau.github.io/UniversalSynSaveInstance/api/SynSaveInstance
				synsaveinstance(Options)
			end,
		})

		local Divider = MainTab:CreateDivider()

		local Lighting = game:GetService("Lighting")

		local isFullbright = false
		local FULLBRIGHT_COLOR = Color3.new(1, 1, 1)

		local originalSettings = {
			Ambient = Lighting.Ambient,
			ColorShift_Bottom = Lighting.ColorShift_Bottom,
			ColorShift_Top = Lighting.ColorShift_Top
		}

		local function setFullbright()
			Lighting.Ambient = FULLBRIGHT_COLOR
			Lighting.ColorShift_Bottom = FULLBRIGHT_COLOR
			Lighting.ColorShift_Top = FULLBRIGHT_COLOR
		end

		local function revertLighting()
			Lighting.Ambient = originalSettings.Ambient
			Lighting.ColorShift_Bottom = originalSettings.ColorShift_Bottom
			Lighting.ColorShift_Top = originalSettings.ColorShift_Top
		end

		MainTab:CreateToggle({
			Name = "fullbright",
			CurrentValue = isFullbright,
			Flag = "fullbright",
			Callback = function(Value)
				isFullbright = Value
				if isFullbright then
					setFullbright()
				else
					revertLighting()
				end
			end,
		})

		local infj = false

		game:GetService("UserInputService").InputBegan:connect(function(a,v)
			if infj == true and not v and a.KeyCode == Enum.KeyCode.Space then
				game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
			end
		end)

		MainTab:CreateToggle({
			Name = "toggle inf jump",
			CurrentValue = infj,
			Flag = "infj_toggle",
			Callback = function(Value)
				infj = Value
			end,
		})

		Lighting.LightingChanged:Connect(function()
			if not isFullbright then
				originalSettings.Ambient = Lighting.Ambient
				originalSettings.ColorShift_Bottom = Lighting.ColorShift_Bottom
				originalSettings.ColorShift_Top = Lighting.ColorShift_Top
			else
				setFullbright()
			end
		end)

		local swim = MainTab:CreateButton({
			Name = "go swimming",
			Callback = function()
				local player = game:GetService("Players").LocalPlayer
				local character = player.Character or player.CharacterAdded:Wait()
				local humanoid = character:WaitForChild("Humanoid")
				humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
			end,
		})

		local Freecam = MainTab:CreateButton({
			Name = "freecam (shift + p)",
			Callback = function()
				loadstring(
					game:HttpGetAsync("https://pastebin.com/raw/6ngxJT8b")
				)()
			end,
		})
	end
}
